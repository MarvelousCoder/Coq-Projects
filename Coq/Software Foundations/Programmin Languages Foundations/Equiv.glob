DIGEST 4b4bc9373066fc7f16680f5b9b4c519b
FEquiv
R98:110 Coq.Bool.Bool <> <> lib
R128:142 Coq.Arith.Arith <> <> lib
R160:174 Coq.Arith.EqNat <> <> lib
R192:206 Coq.omega.Omega <> <> lib
R224:237 Coq.Lists.List <> <> lib
R255:288 Coq.Logic.FunctionalExtensionality <> <> lib
R328:331 Maps <> <> lib
R349:351 Imp <> <> lib
def 2625:2630 <> aequiv
R2641:2644 Imp <> aexp ind
R2670:2674 Imp <> state def
R2693:2695 Coq.Init.Logic <> :type_scope:x_'='_x not
R2682:2686 Imp <> aeval def
R2691:2692 Equiv <> a1 var
R2688:2689 Equiv <> st var
R2696:2700 Imp <> aeval def
R2705:2706 Equiv <> a2 var
R2702:2703 Equiv <> st var
def 2721:2726 <> bequiv
R2737:2740 Imp <> bexp ind
R2766:2770 Imp <> state def
R2789:2791 Coq.Init.Logic <> :type_scope:x_'='_x not
R2778:2782 Imp <> beval def
R2787:2788 Equiv <> b1 var
R2784:2785 Equiv <> st var
R2792:2796 Imp <> beval def
R2801:2802 Equiv <> b2 var
R2798:2799 Equiv <> st var
prf 2911:2924 <> aequiv_example
R2929:2934 Equiv <> aequiv def
R2962:2965 Imp <> ANum constr
R2937:2942 Imp <> AMinus constr
R2953:2955 Imp <> AId constr
R2957:2957 Imp <> X def
R2945:2947 Imp <> AId constr
R2949:2949 Imp <> X def
prf 3019:3032 <> bequiv_example
R3037:3042 Equiv <> bequiv def
R3084:3088 Imp <> BTrue constr
R3045:3047 Imp <> BEq constr
R3075:3078 Imp <> ANum constr
R3050:3055 Imp <> AMinus constr
R3066:3068 Imp <> AId constr
R3070:3070 Imp <> X def
R3058:3060 Imp <> AId constr
R3062:3062 Imp <> X def
R3118:3122 Imp <> beval def
R3135:3148 Equiv <> aequiv_example thm
R3135:3148 Equiv <> aequiv_example thm
R3135:3148 Equiv <> aequiv_example thm
def 3846:3851 <> cequiv
R3862:3864 Imp <> com ind
R3896:3900 Imp <> state def
R3908:3908 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3923:3929 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3944:3944 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3911:3913 Imp <> ::x_'/'_x_'\\'_x not
R3916:3919 Imp <> ::x_'/'_x_'\\'_x not
R3909:3910 Equiv <> c1 var
R3914:3915 Equiv <> st var
R3920:3922 Equiv <> st' var
R3932:3934 Imp <> ::x_'/'_x_'\\'_x not
R3937:3940 Imp <> ::x_'/'_x_'\\'_x not
R3930:3931 Equiv <> c2 var
R3935:3936 Equiv <> st var
R3941:3943 Equiv <> st' var
prf 4185:4193 <> skip_left
R4208:4213 Equiv <> cequiv def
R4236:4236 Equiv <> c var
R4225:4227 Imp <> ::x_';;'_x not
R4221:4224 Imp <> ::'SKIP' not
R4228:4228 Equiv <> c var
R4409:4413 Imp <> E_Seq constr
R4409:4413 Imp <> E_Seq constr
R4434:4439 Imp <> E_Skip constr
R4434:4439 Imp <> E_Skip constr
prf 4604:4613 <> skip_right
R4628:4633 Equiv <> cequiv def
R4655:4655 Equiv <> c var
R4641:4644 Imp <> ::x_';;'_x not
R4640:4640 Equiv <> c var
R4645:4648 Imp <> ::'SKIP' not
prf 4801:4815 <> IFB_true_simple
R4834:4839 Equiv <> cequiv def
R4880:4881 Equiv <> c1 var
R4846:4849 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4855:4860 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4863:4868 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4871:4873 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4850:4854 Imp <> BTrue constr
R4861:4862 Equiv <> c1 var
R4869:4870 Equiv <> c2 var
R5012:5019 Imp <> E_IfTrue constr
R5012:5019 Imp <> E_IfTrue constr
prf 6934:6941 <> IFB_true
R6979:6988 Coq.Init.Logic <> :type_scope:x_'->'_x not
R6989:6994 Equiv <> cequiv def
R7037:7038 Equiv <> c1 var
R7004:7007 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7009:7014 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7017:7022 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7025:7027 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7008:7008 Equiv <> b var
R7015:7016 Equiv <> c1 var
R7023:7024 Equiv <> c2 var
R6965:6970 Equiv <> bequiv def
R6974:6978 Imp <> BTrue constr
R6972:6972 Equiv <> b var
R7237:7242 Equiv <> bequiv def
R7331:7338 Imp <> E_IfTrue constr
R7331:7338 Imp <> E_IfTrue constr
R7368:7373 Equiv <> bequiv def
prf 7495:7503 <> IFB_false
R7539:7545 Coq.Init.Logic <> :type_scope:x_'->'_x not
R7546:7551 Equiv <> cequiv def
R7588:7589 Equiv <> c2 var
R7558:7561 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7563:7568 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7571:7576 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7579:7581 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7562:7562 Equiv <> b var
R7569:7570 Equiv <> c1 var
R7577:7578 Equiv <> c2 var
R7524:7529 Equiv <> bequiv def
R7533:7538 Imp <> BFalse constr
R7531:7531 Equiv <> b var
prf 7784:7799 <> swap_if_branches
R7820:7825 Equiv <> cequiv def
R7863:7866 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7873:7878 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7881:7886 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7889:7891 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7867:7870 Imp <> BNot constr
R7872:7872 Equiv <> b var
R7879:7880 Equiv <> e2 var
R7887:7888 Equiv <> e1 var
R7832:7835 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7837:7842 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7845:7850 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7853:7855 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R7836:7836 Equiv <> b var
R7843:7844 Equiv <> e1 var
R7851:7852 Equiv <> e2 var
prf 8273:8283 <> WHILE_false
R8316:8321 Coq.Init.Logic <> :type_scope:x_'->'_x not
R8322:8327 Equiv <> cequiv def
R8356:8359 Imp <> ::'SKIP' not
R8334:8339 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R8341:8344 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R8346:8349 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R8340:8340 Equiv <> b var
R8345:8345 Equiv <> c var
R8301:8306 Equiv <> bequiv def
R8310:8315 Imp <> BFalse constr
R8308:8308 Equiv <> b var
R8477:8482 Imp <> E_Skip constr
R8477:8482 Imp <> E_Skip constr
R8594:8605 Imp <> E_WhileFalse constr
R8594:8605 Imp <> E_WhileFalse constr
prf 9938:9955 <> WHILE_true_nonterm
R9994:9999 Coq.Init.Logic <> :type_scope:x_'->'_x not
R10000:10002 Coq.Init.Logic <> :type_scope:'~'_x not
R10033:10034 Coq.Init.Logic <> :type_scope:'~'_x not
R10003:10003 Imp <> ::x_'/'_x_'\\'_x not
R10020:10023 Imp <> ::x_'/'_x_'\\'_x not
R10026:10029 Imp <> ::x_'/'_x_'\\'_x not
R10004:10009 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10011:10014 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10016:10019 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10010:10010 Equiv <> b var
R10015:10015 Equiv <> c var
R10024:10025 Equiv <> st var
R10030:10032 Equiv <> st' var
R9980:9985 Equiv <> bequiv def
R9989:9993 Imp <> BTrue constr
R9987:9987 Equiv <> b var
R10116:10121 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10123:10126 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10128:10131 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10116:10121 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10123:10126 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10128:10131 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10425:10430 Equiv <> bequiv def
prf 10960:10969 <> WHILE_true
R11000:11006 Coq.Init.Logic <> :type_scope:x_'->'_x not
R11007:11012 Equiv <> cequiv def
R11042:11047 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11053:11056 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11061:11064 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11048:11052 Imp <> BTrue constr
R11057:11060 Imp <> ::'SKIP' not
R11019:11024 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11026:11029 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11031:11034 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11025:11025 Equiv <> b var
R11030:11030 Equiv <> c var
R10986:10991 Equiv <> bequiv def
R10995:10999 Imp <> BTrue constr
R10993:10993 Equiv <> b var
prf 11337:11350 <> loop_unrolling
R11367:11372 Equiv <> cequiv def
R11402:11405 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R11407:11413 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R11435:11441 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R11446:11448 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R11406:11406 Equiv <> b var
R11415:11418 Imp <> ::x_';;'_x not
R11414:11414 Equiv <> c var
R11419:11424 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11426:11429 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11431:11434 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11425:11425 Equiv <> b var
R11430:11430 Equiv <> c var
R11442:11445 Imp <> ::'SKIP' not
R11379:11384 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11386:11389 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11391:11394 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R11385:11385 Equiv <> b var
R11390:11390 Equiv <> c var
R11605:11613 Imp <> E_IfFalse constr
R11605:11613 Imp <> E_IfFalse constr
R11634:11639 Imp <> E_Skip constr
R11634:11639 Imp <> E_Skip constr
R11676:11683 Imp <> E_IfTrue constr
R11676:11683 Imp <> E_IfTrue constr
R11710:11714 Imp <> E_Seq constr
R11710:11714 Imp <> E_Seq constr
R11860:11870 Imp <> E_WhileTrue constr
R11860:11870 Imp <> E_WhileTrue constr
R11996:12007 Imp <> E_WhileFalse constr
R11996:12007 Imp <> E_WhileFalse constr
prf 12090:12098 <> seq_assoc
R12121:12126 Equiv <> cequiv def
R12146:12148 Imp <> ::x_';;'_x not
R12155:12155 Imp <> ::x_';;'_x not
R12144:12145 Equiv <> c1 var
R12151:12152 Imp <> ::x_';;'_x not
R12149:12150 Equiv <> c2 var
R12153:12154 Equiv <> c3 var
R12129:12129 Imp <> ::x_';;'_x not
R12136:12138 Imp <> ::x_';;'_x not
R12132:12133 Imp <> ::x_';;'_x not
R12130:12131 Equiv <> c1 var
R12134:12135 Equiv <> c2 var
R12139:12140 Equiv <> c3 var
prf 12354:12372 <> identity_assignment
R12386:12387 Maps <> id ind
R12393:12398 Equiv <> cequiv def
R12422:12425 Imp <> ::'SKIP' not
R12406:12410 Imp <> ::x_'::='_x not
R12405:12405 Equiv <> X var
R12411:12413 Imp <> AId constr
R12415:12415 Equiv <> X var
R12528:12535 Maps <> t_update def
R12528:12535 Maps <> t_update def
R12596:12620 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R12596:12620 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R12647:12659 Maps <> t_update_same prfax
R12647:12659 Maps <> t_update_same prfax
R12647:12659 Maps <> t_update_same prfax
R12716:12723 Maps <> t_update def
R12732:12736 Imp <> aeval def
R12743:12745 Imp <> AId constr
R12716:12723 Maps <> t_update def
R12732:12736 Imp <> aeval def
R12743:12745 Imp <> AId constr
R12788:12792 Imp <> E_Ass constr
R12788:12792 Imp <> E_Ass constr
R12823:12847 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R12823:12847 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R12874:12886 Maps <> t_update_same prfax
R12874:12886 Maps <> t_update_same prfax
R12874:12886 Maps <> t_update_same prfax
prf 12976:12988 <> assign_aequiv
R13022:13027 Coq.Init.Logic <> :type_scope:x_'->'_x not
R13028:13033 Equiv <> cequiv def
R13042:13046 Imp <> ::x_'::='_x not
R13041:13041 Equiv <> X var
R13047:13047 Equiv <> e var
R13035:13038 Imp <> ::'SKIP' not
R13006:13011 Equiv <> aequiv def
R13021:13021 Equiv <> e var
R13014:13016 Imp <> AId constr
R13018:13018 Equiv <> X var
def 13675:13680 <> prog_a
R13684:13686 Imp <> com ind
R13693:13698 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13726:13733 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13762:13767 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13699:13702 Imp <> BNot constr
R13705:13707 Imp <> BLe constr
R13718:13721 Imp <> ANum constr
R13710:13712 Imp <> AId constr
R13714:13714 Imp <> X def
R13735:13739 Imp <> ::x_'::='_x not
R13734:13734 Imp <> X def
R13740:13744 Imp <> APlus constr
R13755:13758 Imp <> ANum constr
R13747:13749 Imp <> AId constr
R13751:13751 Imp <> X def
def 13782:13787 <> prog_b
R13791:13793 Imp <> com ind
R13910:13914 Imp <> ::x_';;'_x not
R13800:13803 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13824:13833 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13881:13892 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13905:13909 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R13804:13806 Imp <> BEq constr
R13817:13820 Imp <> ANum constr
R13809:13811 Imp <> AId constr
R13813:13813 Imp <> X def
R13862:13868 Imp <> ::x_';;'_x not
R13835:13839 Imp <> ::x_'::='_x not
R13834:13834 Imp <> X def
R13840:13844 Imp <> APlus constr
R13855:13858 Imp <> ANum constr
R13847:13849 Imp <> AId constr
R13851:13851 Imp <> X def
R13870:13874 Imp <> ::x_'::='_x not
R13869:13869 Imp <> Y def
R13875:13878 Imp <> ANum constr
R13894:13898 Imp <> ::x_'::='_x not
R13893:13893 Imp <> Y def
R13899:13902 Imp <> ANum constr
R13943:13947 Imp <> ::x_';;'_x not
R13916:13920 Imp <> ::x_'::='_x not
R13915:13915 Imp <> X def
R13921:13926 Imp <> AMinus constr
R13937:13939 Imp <> AId constr
R13941:13941 Imp <> Y def
R13929:13931 Imp <> AId constr
R13933:13933 Imp <> X def
R13949:13953 Imp <> ::x_'::='_x not
R13948:13948 Imp <> Y def
R13954:13957 Imp <> ANum constr
def 13974:13979 <> prog_c
R13983:13985 Imp <> com ind
R13992:13995 Imp <> ::'SKIP' not
def 14010:14015 <> prog_d
R14019:14021 Imp <> com ind
R14028:14033 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14061:14068 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14113:14118 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14034:14037 Imp <> BNot constr
R14040:14042 Imp <> BEq constr
R14053:14056 Imp <> ANum constr
R14045:14047 Imp <> AId constr
R14049:14049 Imp <> X def
R14070:14074 Imp <> ::x_'::='_x not
R14069:14069 Imp <> X def
R14075:14079 Imp <> APlus constr
R14106:14109 Imp <> ANum constr
R14082:14086 Imp <> AMult constr
R14097:14099 Imp <> AId constr
R14101:14101 Imp <> Y def
R14089:14091 Imp <> AId constr
R14093:14093 Imp <> X def
def 14133:14138 <> prog_e
R14142:14144 Imp <> com ind
R14152:14156 Imp <> ::x_'::='_x not
R14151:14151 Imp <> Y def
R14157:14160 Imp <> ANum constr
def 14177:14182 <> prog_f
R14186:14188 Imp <> com ind
R14223:14227 Imp <> ::x_';;'_x not
R14196:14200 Imp <> ::x_'::='_x not
R14195:14195 Imp <> Y def
R14201:14205 Imp <> APlus constr
R14216:14219 Imp <> ANum constr
R14208:14210 Imp <> AId constr
R14212:14212 Imp <> X def
R14228:14233 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14260:14267 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14296:14301 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14234:14237 Imp <> BNot constr
R14240:14242 Imp <> BEq constr
R14253:14255 Imp <> AId constr
R14257:14257 Imp <> Y def
R14245:14247 Imp <> AId constr
R14249:14249 Imp <> X def
R14269:14273 Imp <> ::x_'::='_x not
R14268:14268 Imp <> Y def
R14274:14278 Imp <> APlus constr
R14289:14292 Imp <> ANum constr
R14281:14283 Imp <> AId constr
R14285:14285 Imp <> X def
def 14316:14321 <> prog_g
R14325:14327 Imp <> com ind
R14334:14339 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14345:14352 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14357:14362 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14340:14344 Imp <> BTrue constr
R14353:14356 Imp <> ::'SKIP' not
def 14377:14382 <> prog_h
R14386:14388 Imp <> com ind
R14395:14400 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14427:14434 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14463:14468 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14401:14404 Imp <> BNot constr
R14407:14409 Imp <> BEq constr
R14420:14422 Imp <> AId constr
R14424:14424 Imp <> X def
R14412:14414 Imp <> AId constr
R14416:14416 Imp <> X def
R14436:14440 Imp <> ::x_'::='_x not
R14435:14435 Imp <> X def
R14441:14445 Imp <> APlus constr
R14456:14459 Imp <> ANum constr
R14448:14450 Imp <> AId constr
R14452:14452 Imp <> X def
def 14483:14488 <> prog_i
R14492:14494 Imp <> com ind
R14501:14506 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14533:14540 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14569:14574 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14507:14510 Imp <> BNot constr
R14513:14515 Imp <> BEq constr
R14526:14528 Imp <> AId constr
R14530:14530 Imp <> Y def
R14518:14520 Imp <> AId constr
R14522:14522 Imp <> X def
R14542:14546 Imp <> ::x_'::='_x not
R14541:14541 Imp <> X def
R14547:14551 Imp <> APlus constr
R14562:14565 Imp <> ANum constr
R14554:14556 Imp <> AId constr
R14558:14558 Imp <> Y def
def 14589:14601 <> equiv_classes
R14605:14608 Coq.Init.Datatypes <> list ind
R14611:14614 Coq.Init.Datatypes <> list ind
R14616:14618 Imp <> com ind
prf 15243:15253 <> refl_aequiv
R15269:15272 Imp <> aexp ind
R15276:15281 Equiv <> aequiv def
R15285:15285 Equiv <> a var
R15283:15283 Equiv <> a var
prf 15336:15345 <> sym_aequiv
R15365:15368 Imp <> aexp ind
R15386:15389 Coq.Init.Logic <> :type_scope:x_'->'_x not
R15390:15395 Equiv <> aequiv def
R15400:15401 Equiv <> a1 var
R15397:15398 Equiv <> a2 var
R15374:15379 Equiv <> aequiv def
R15384:15385 Equiv <> a2 var
R15381:15382 Equiv <> a1 var
prf 15472:15483 <> trans_aequiv
R15506:15509 Imp <> aexp ind
R15527:15530 Coq.Init.Logic <> :type_scope:x_'->'_x not
R15543:15546 Coq.Init.Logic <> :type_scope:x_'->'_x not
R15547:15552 Equiv <> aequiv def
R15557:15558 Equiv <> a3 var
R15554:15555 Equiv <> a1 var
R15531:15536 Equiv <> aequiv def
R15541:15542 Equiv <> a3 var
R15538:15539 Equiv <> a2 var
R15515:15520 Equiv <> aequiv def
R15525:15526 Equiv <> a2 var
R15522:15523 Equiv <> a1 var
R15577:15582 Equiv <> aequiv def
prf 15677:15687 <> refl_bequiv
R15703:15706 Imp <> bexp ind
R15710:15715 Equiv <> bequiv def
R15719:15719 Equiv <> b var
R15717:15717 Equiv <> b var
R15738:15743 Equiv <> bequiv def
prf 15785:15794 <> sym_bequiv
R15814:15817 Imp <> bexp ind
R15835:15838 Coq.Init.Logic <> :type_scope:x_'->'_x not
R15839:15844 Equiv <> bequiv def
R15849:15850 Equiv <> b1 var
R15846:15847 Equiv <> b2 var
R15823:15828 Equiv <> bequiv def
R15833:15834 Equiv <> b2 var
R15830:15831 Equiv <> b1 var
R15869:15874 Equiv <> bequiv def
prf 15936:15947 <> trans_bequiv
R15970:15973 Imp <> bexp ind
R15991:15994 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16007:16010 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16011:16016 Equiv <> bequiv def
R16021:16022 Equiv <> b3 var
R16018:16019 Equiv <> b1 var
R15995:16000 Equiv <> bequiv def
R16005:16006 Equiv <> b3 var
R16002:16003 Equiv <> b2 var
R15979:15984 Equiv <> bequiv def
R15989:15990 Equiv <> b2 var
R15986:15987 Equiv <> b1 var
R16041:16046 Equiv <> bequiv def
prf 16141:16151 <> refl_cequiv
R16167:16169 Imp <> com ind
R16173:16178 Equiv <> cequiv def
R16182:16182 Equiv <> c var
R16180:16180 Equiv <> c var
R16201:16206 Equiv <> cequiv def
R16232:16239 Coq.Init.Logic <> iff_refl thm
R16232:16239 Coq.Init.Logic <> iff_refl thm
prf 16255:16264 <> sym_cequiv
R16284:16286 Imp <> com ind
R16304:16307 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16308:16313 Equiv <> cequiv def
R16318:16319 Equiv <> c1 var
R16315:16316 Equiv <> c2 var
R16292:16297 Equiv <> cequiv def
R16302:16303 Equiv <> c2 var
R16299:16300 Equiv <> c1 var
R16338:16343 Equiv <> cequiv def
R16393:16397 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R16381:16383 Imp <> ::x_'/'_x_'\\'_x not
R16386:16389 Imp <> ::x_'/'_x_'\\'_x not
R16400:16402 Imp <> ::x_'/'_x_'\\'_x not
R16405:16408 Imp <> ::x_'/'_x_'\\'_x not
R16393:16397 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R16381:16383 Imp <> ::x_'/'_x_'\\'_x not
R16386:16389 Imp <> ::x_'/'_x_'\\'_x not
R16400:16402 Imp <> ::x_'/'_x_'\\'_x not
R16405:16408 Imp <> ::x_'/'_x_'\\'_x not
R16469:16475 Coq.Init.Logic <> iff_sym thm
R16469:16475 Coq.Init.Logic <> iff_sym thm
prf 16502:16510 <> iff_trans
R16542:16542 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16552:16556 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16557:16557 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16567:16572 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16582:16582 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16575:16579 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R16573:16574 Equiv <> P1 var
R16580:16581 Equiv <> P3 var
R16560:16564 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R16558:16559 Equiv <> P2 var
R16565:16566 Equiv <> P3 var
R16545:16549 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R16543:16544 Equiv <> P1 var
R16550:16551 Equiv <> P2 var
prf 16748:16759 <> trans_cequiv
R16782:16784 Imp <> com ind
R16802:16805 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16818:16821 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16822:16827 Equiv <> cequiv def
R16832:16833 Equiv <> c3 var
R16829:16830 Equiv <> c1 var
R16806:16811 Equiv <> cequiv def
R16816:16817 Equiv <> c3 var
R16813:16814 Equiv <> c2 var
R16790:16795 Equiv <> cequiv def
R16800:16801 Equiv <> c2 var
R16797:16798 Equiv <> c1 var
R16852:16857 Equiv <> cequiv def
R16918:16920 Imp <> ::x_'/'_x_'\\'_x not
R16923:16926 Imp <> ::x_'/'_x_'\\'_x not
R16900:16908 Equiv <> iff_trans thm
R16918:16920 Imp <> ::x_'/'_x_'\\'_x not
R16923:16926 Imp <> ::x_'/'_x_'\\'_x not
R16900:16908 Equiv <> iff_trans thm
prf 18323:18337 <> CAss_congruence
R18373:18378 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18379:18384 Equiv <> cequiv def
R18399:18402 Imp <> CAss constr
R18406:18408 Equiv <> a1' var
R18404:18404 Equiv <> i var
R18387:18390 Imp <> CAss constr
R18394:18395 Equiv <> a1 var
R18392:18392 Equiv <> i var
R18360:18365 Equiv <> aequiv def
R18370:18372 Equiv <> a1' var
R18367:18368 Equiv <> a1 var
R18521:18525 Imp <> E_Ass constr
R18521:18525 Imp <> E_Ass constr
R18607:18611 Imp <> E_Ass constr
R18607:18611 Imp <> E_Ass constr
prf 20469:20485 <> CWhile_congruence
R20526:20529 Coq.Init.Logic <> :type_scope:x_'->'_x not
R20543:20548 Coq.Init.Logic <> :type_scope:x_'->'_x not
R20549:20554 Equiv <> cequiv def
R20578:20583 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20587:20590 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20594:20597 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20584:20586 Equiv <> b1' var
R20591:20593 Equiv <> c1' var
R20557:20562 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20565:20568 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20571:20574 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20563:20564 Equiv <> b1 var
R20569:20570 Equiv <> c1 var
R20530:20535 Equiv <> cequiv def
R20540:20542 Equiv <> c1' var
R20537:20538 Equiv <> c1 var
R20513:20518 Equiv <> bequiv def
R20523:20525 Equiv <> b1' var
R20520:20521 Equiv <> b1 var
R20641:20646 Equiv <> bequiv def
R20648:20653 Equiv <> cequiv def
R20745:20750 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20753:20756 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20759:20762 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20745:20750 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20753:20756 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20759:20762 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R20880:20891 Imp <> E_WhileFalse constr
R20880:20891 Imp <> E_WhileFalse constr
R20956:20966 Imp <> E_WhileTrue constr
R20956:20966 Imp <> E_WhileTrue constr
R21215:21220 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R21224:21227 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R21231:21234 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R21215:21220 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R21224:21227 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R21231:21234 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R21355:21366 Imp <> E_WhileFalse constr
R21355:21366 Imp <> E_WhileFalse constr
R21431:21441 Imp <> E_WhileTrue constr
R21431:21441 Imp <> E_WhileTrue constr
prf 21737:21751 <> CSeq_congruence
R21792:21795 Coq.Init.Logic <> :type_scope:x_'->'_x not
R21809:21814 Coq.Init.Logic <> :type_scope:x_'->'_x not
R21815:21820 Equiv <> cequiv def
R21835:21836 Imp <> ::x_';;'_x not
R21832:21834 Equiv <> c1' var
R21837:21839 Equiv <> c2' var
R21825:21826 Imp <> ::x_';;'_x not
R21823:21824 Equiv <> c1 var
R21827:21828 Equiv <> c2 var
R21796:21801 Equiv <> cequiv def
R21806:21808 Equiv <> c2' var
R21803:21804 Equiv <> c2 var
R21779:21784 Equiv <> cequiv def
R21789:21791 Equiv <> c1' var
R21786:21787 Equiv <> c1 var
prf 21948:21961 <> CIf_congruence
R22005:22008 Coq.Init.Logic <> :type_scope:x_'->'_x not
R22022:22025 Coq.Init.Logic <> :type_scope:x_'->'_x not
R22039:22044 Coq.Init.Logic <> :type_scope:x_'->'_x not
R22045:22050 Equiv <> cequiv def
R22089:22092 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22095:22100 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22104:22109 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22113:22115 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22093:22094 Equiv <> b' var
R22101:22103 Equiv <> c1' var
R22110:22112 Equiv <> c2' var
R22053:22056 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22058:22063 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22066:22071 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22074:22076 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22057:22057 Equiv <> b var
R22064:22065 Equiv <> c1 var
R22072:22073 Equiv <> c2 var
R22026:22031 Equiv <> cequiv def
R22036:22038 Equiv <> c2' var
R22033:22034 Equiv <> c2 var
R22009:22014 Equiv <> cequiv def
R22019:22021 Equiv <> c1' var
R22016:22017 Equiv <> c1 var
R21994:21999 Equiv <> bequiv def
R22003:22004 Equiv <> b' var
R22001:22001 Equiv <> b var
def 22270:22287 <> congruence_example
R22292:22297 Equiv <> cequiv def
R22480:22487 Imp <> ::x_';;'_x not
R22469:22473 Imp <> ::x_'::='_x not
R22468:22468 Imp <> X def
R22474:22477 Imp <> ANum constr
R22488:22492 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22513:22531 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22560:22603 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22617:22624 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22493:22495 Imp <> BEq constr
R22506:22509 Imp <> ANum constr
R22498:22500 Imp <> AId constr
R22502:22502 Imp <> X def
R22533:22537 Imp <> ::x_'::='_x not
R22532:22532 Imp <> Y def
R22538:22543 Imp <> AMinus constr
R22554:22556 Imp <> AId constr
R22558:22558 Imp <> X def
R22546:22548 Imp <> AId constr
R22550:22550 Imp <> X def
R22605:22609 Imp <> ::x_'::='_x not
R22604:22604 Imp <> Y def
R22610:22613 Imp <> ANum constr
R22337:22344 Imp <> ::x_';;'_x not
R22326:22330 Imp <> ::x_'::='_x not
R22325:22325 Imp <> X def
R22331:22334 Imp <> ANum constr
R22345:22349 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22370:22388 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22401:22418 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22432:22439 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R22350:22352 Imp <> BEq constr
R22363:22366 Imp <> ANum constr
R22355:22357 Imp <> AId constr
R22359:22359 Imp <> X def
R22390:22394 Imp <> ::x_'::='_x not
R22389:22389 Imp <> Y def
R22395:22398 Imp <> ANum constr
R22420:22424 Imp <> ::x_'::='_x not
R22419:22419 Imp <> Y def
R22425:22428 Imp <> ANum constr
R22643:22657 Equiv <> CSeq_congruence prfax
R22643:22657 Equiv <> CSeq_congruence prfax
R22670:22680 Equiv <> refl_cequiv thm
R22670:22680 Equiv <> refl_cequiv thm
R22693:22706 Equiv <> CIf_congruence prfax
R22693:22706 Equiv <> CIf_congruence prfax
R22721:22731 Equiv <> refl_bequiv thm
R22721:22731 Equiv <> refl_bequiv thm
R22746:22760 Equiv <> CAss_congruence thm
R22746:22760 Equiv <> CAss_congruence thm
R22770:22775 Equiv <> aequiv def
R22809:22818 Coq.Arith.Minus <> minus_diag syndef
R22809:22818 Coq.Arith.Minus <> minus_diag syndef
R22833:22843 Equiv <> refl_cequiv thm
R22833:22843 Equiv <> refl_cequiv thm
def 23603:23614 <> atrans_sound
R23630:23633 Coq.Init.Logic <> :type_scope:x_'->'_x not
R23634:23637 Imp <> aexp ind
R23626:23629 Imp <> aexp ind
R23664:23667 Imp <> aexp ind
R23675:23680 Equiv <> aequiv def
R23685:23690 Equiv <> atrans var
R23692:23692 Equiv <> a var
R23682:23682 Equiv <> a var
def 23708:23719 <> btrans_sound
R23735:23738 Coq.Init.Logic <> :type_scope:x_'->'_x not
R23739:23742 Imp <> bexp ind
R23731:23734 Imp <> bexp ind
R23769:23772 Imp <> bexp ind
R23780:23785 Equiv <> bequiv def
R23790:23795 Equiv <> btrans var
R23797:23797 Equiv <> b var
R23787:23787 Equiv <> b var
def 23813:23824 <> ctrans_sound
R23839:23842 Coq.Init.Logic <> :type_scope:x_'->'_x not
R23843:23845 Imp <> com ind
R23836:23838 Imp <> com ind
R23872:23874 Imp <> com ind
R23882:23887 Equiv <> cequiv def
R23892:23897 Equiv <> ctrans var
R23899:23899 Equiv <> c var
R23889:23889 Equiv <> c var
def 24225:24243 <> fold_constants_aexp
R24250:24253 Imp <> aexp ind
R24258:24261 Imp <> aexp ind
R24274:24274 Equiv <> a var
R24285:24288 Imp <> ANum constr
R24301:24304 Imp <> ANum constr
R24312:24314 Imp <> AId constr
R24328:24330 Imp <> AId constr
R24338:24342 Imp <> APlus constr
R24364:24364 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24387:24388 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24411:24411 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24365:24383 Equiv <> fold_constants_aexp def
R24389:24407 Equiv <> fold_constants_aexp def
R24428:24428 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24436:24437 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24445:24445 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24429:24432 Imp <> ANum constr
R24438:24441 Imp <> ANum constr
R24450:24453 Imp <> ANum constr
R24458:24460 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R24471:24471 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24475:24476 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24480:24480 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24485:24489 Imp <> APlus constr
R24511:24516 Imp <> AMinus constr
R24537:24537 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24560:24561 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24584:24584 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24538:24556 Equiv <> fold_constants_aexp def
R24562:24580 Equiv <> fold_constants_aexp def
R24601:24601 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24609:24610 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24618:24618 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24602:24605 Imp <> ANum constr
R24611:24614 Imp <> ANum constr
R24623:24626 Imp <> ANum constr
R24631:24633 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R24644:24644 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24648:24649 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24653:24653 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24658:24663 Imp <> AMinus constr
R24685:24689 Imp <> AMult constr
R24711:24711 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24734:24735 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24758:24758 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24712:24730 Equiv <> fold_constants_aexp def
R24736:24754 Equiv <> fold_constants_aexp def
R24775:24775 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24783:24784 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24792:24792 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24776:24779 Imp <> ANum constr
R24785:24788 Imp <> ANum constr
R24797:24800 Imp <> ANum constr
R24805:24807 Coq.Init.Peano <> :nat_scope:x_'*'_x not
R24818:24818 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24822:24823 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24827:24827 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24832:24836 Imp <> AMult constr
def 24870:24882 <> fold_aexp_ex1
R24957:24961 Coq.Init.Logic <> :type_scope:x_'='_x not
R24890:24908 Equiv <> fold_constants_aexp def
R24917:24921 Imp <> AMult constr
R24950:24952 Imp <> AId constr
R24954:24954 Imp <> X def
R24924:24928 Imp <> APlus constr
R24940:24943 Imp <> ANum constr
R24931:24934 Imp <> ANum constr
R24962:24966 Imp <> AMult constr
R24978:24980 Imp <> AId constr
R24982:24982 Imp <> X def
R24969:24972 Imp <> ANum constr
def 25325:25337 <> fold_aexp_ex2
R25458:25462 Coq.Init.Logic <> :type_scope:x_'='_x not
R25345:25363 Equiv <> fold_constants_aexp def
R25372:25377 Imp <> AMinus constr
R25388:25392 Imp <> APlus constr
R25450:25452 Imp <> AId constr
R25454:25454 Imp <> Y def
R25395:25399 Imp <> AMult constr
R25411:25414 Imp <> ANum constr
R25402:25405 Imp <> ANum constr
R25380:25382 Imp <> AId constr
R25384:25384 Imp <> X def
R25463:25468 Imp <> AMinus constr
R25479:25483 Imp <> APlus constr
R25495:25497 Imp <> AId constr
R25499:25499 Imp <> Y def
R25486:25489 Imp <> ANum constr
R25471:25473 Imp <> AId constr
R25475:25475 Imp <> X def
def 25721:25739 <> fold_constants_bexp
R25746:25749 Imp <> bexp ind
R25754:25757 Imp <> bexp ind
R25770:25770 Equiv <> b var
R25781:25785 Imp <> BTrue constr
R25797:25801 Imp <> BTrue constr
R25807:25812 Imp <> BFalse constr
R25823:25828 Imp <> BFalse constr
R25834:25836 Imp <> BEq constr
R25860:25860 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25883:25884 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25907:25907 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25861:25879 Equiv <> fold_constants_aexp def
R25885:25903 Equiv <> fold_constants_aexp def
R25922:25922 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25930:25931 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25939:25939 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R25923:25926 Imp <> ANum constr
R25932:25935 Imp <> ANum constr
R25957:25963 Coq.Arith.EqNat <> beq_nat syndef
R25987:25992 Imp <> BFalse constr
R25976:25980 Imp <> BTrue constr
R26002:26002 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26006:26007 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26011:26011 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26026:26028 Imp <> BEq constr
R26052:26054 Imp <> BLe constr
R26078:26078 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26101:26102 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26125:26125 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26079:26097 Equiv <> fold_constants_aexp def
R26103:26121 Equiv <> fold_constants_aexp def
R26140:26140 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26148:26149 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26157:26157 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26141:26144 Imp <> ANum constr
R26150:26153 Imp <> ANum constr
R26175:26177 Coq.Arith.Compare_dec <> leb syndef
R26201:26206 Imp <> BFalse constr
R26190:26194 Imp <> BTrue constr
R26216:26216 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26220:26221 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26225:26225 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26240:26242 Imp <> BLe constr
R26266:26269 Imp <> BNot constr
R26291:26309 Equiv <> fold_constants_bexp def
R26328:26332 Imp <> BTrue constr
R26337:26342 Imp <> BFalse constr
R26352:26357 Imp <> BFalse constr
R26362:26366 Imp <> BTrue constr
R26383:26386 Imp <> BNot constr
R26406:26409 Imp <> BAnd constr
R26433:26433 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26456:26457 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26480:26480 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26434:26452 Equiv <> fold_constants_bexp def
R26458:26476 Equiv <> fold_constants_bexp def
R26495:26495 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26501:26502 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26508:26508 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26496:26500 Imp <> BTrue constr
R26503:26507 Imp <> BTrue constr
R26513:26517 Imp <> BTrue constr
R26527:26527 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26533:26534 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26541:26541 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26528:26532 Imp <> BTrue constr
R26535:26540 Imp <> BFalse constr
R26546:26551 Imp <> BFalse constr
R26561:26561 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26568:26569 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26575:26575 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26562:26567 Imp <> BFalse constr
R26570:26574 Imp <> BTrue constr
R26580:26585 Imp <> BFalse constr
R26595:26595 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26602:26603 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26610:26610 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26596:26601 Imp <> BFalse constr
R26604:26609 Imp <> BFalse constr
R26615:26620 Imp <> BFalse constr
R26630:26630 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26634:26635 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26639:26639 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R26644:26647 Imp <> BAnd constr
def 26683:26695 <> fold_bexp_ex1
R26762:26766 Coq.Init.Logic <> :type_scope:x_'='_x not
R26703:26721 Equiv <> fold_constants_bexp def
R26724:26727 Imp <> BAnd constr
R26736:26739 Imp <> BNot constr
R26742:26745 Imp <> BAnd constr
R26754:26758 Imp <> BTrue constr
R26747:26752 Imp <> BFalse constr
R26729:26733 Imp <> BTrue constr
R26767:26771 Imp <> BTrue constr
def 26808:26820 <> fold_bexp_ex2
R27011:27015 Coq.Init.Logic <> :type_scope:x_'='_x not
R26828:26846 Equiv <> fold_constants_bexp def
R26855:26858 Imp <> BAnd constr
R26895:26897 Imp <> BEq constr
R26926:26931 Imp <> AMinus constr
R26943:26947 Imp <> APlus constr
R27000:27003 Imp <> ANum constr
R26950:26953 Imp <> ANum constr
R26934:26937 Imp <> ANum constr
R26900:26903 Imp <> ANum constr
R26861:26863 Imp <> BEq constr
R26874:26876 Imp <> AId constr
R26878:26878 Imp <> Y def
R26866:26868 Imp <> AId constr
R26870:26870 Imp <> X def
R27016:27019 Imp <> BAnd constr
R27043:27047 Imp <> BTrue constr
R27022:27024 Imp <> BEq constr
R27035:27037 Imp <> AId constr
R27039:27039 Imp <> Y def
R27027:27029 Imp <> AId constr
R27031:27031 Imp <> X def
def 27201:27218 <> fold_constants_com
R27225:27227 Imp <> com ind
R27232:27234 Imp <> com ind
R27247:27247 Equiv <> c var
R27258:27261 Imp <> ::'SKIP' not
R27277:27280 Imp <> ::'SKIP' not
R27287:27291 Imp <> ::x_'::='_x not
R27304:27307 Imp <> CAss constr
R27312:27330 Equiv <> fold_constants_aexp def
R27341:27344 Imp <> ::x_';;'_x not
R27358:27358 Imp <> ::x_';;'_x not
R27380:27385 Imp <> ::x_';;'_x not
R27407:27407 Imp <> ::x_';;'_x not
R27359:27376 Equiv <> fold_constants_com def
R27386:27403 Equiv <> fold_constants_com def
R27413:27416 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27418:27423 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27426:27431 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27434:27436 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27453:27471 Equiv <> fold_constants_bexp def
R27488:27492 Imp <> BTrue constr
R27497:27514 Equiv <> fold_constants_com def
R27527:27532 Imp <> BFalse constr
R27537:27554 Equiv <> fold_constants_com def
R27573:27576 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27579:27584 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27606:27632 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27654:27656 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R27585:27602 Equiv <> fold_constants_com def
R27633:27650 Equiv <> fold_constants_com def
R27672:27677 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27679:27682 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27684:27687 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27704:27722 Equiv <> fold_constants_bexp def
R27739:27743 Imp <> BTrue constr
R27748:27753 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27759:27762 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27767:27770 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27754:27758 Imp <> BTrue constr
R27763:27766 Imp <> ::'SKIP' not
R27780:27785 Imp <> BFalse constr
R27790:27793 Imp <> ::'SKIP' not
R27809:27814 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27817:27821 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27842:27846 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R27822:27839 Equiv <> fold_constants_com def
R27841:27841 Equiv <> c var
def 27874:27885 <> fold_com_ex1
R28367:28406 Coq.Init.Logic <> :type_scope:x_'='_x not
R28664:28664 Coq.Init.Logic <> :type_scope:x_'='_x not
R27891:27908 Equiv <> fold_constants_com def
R27972:27979 Imp <> ::x_';;'_x not
R27944:27948 Imp <> ::x_'::='_x not
R27943:27943 Imp <> X def
R27949:27953 Imp <> APlus constr
R27965:27968 Imp <> ANum constr
R27956:27959 Imp <> ANum constr
R28009:28016 Imp <> ::x_';;'_x not
R27981:27985 Imp <> ::x_'::='_x not
R27980:27980 Imp <> Y def
R27986:27991 Imp <> AMinus constr
R28002:28005 Imp <> ANum constr
R27994:27996 Imp <> AId constr
R27998:27998 Imp <> X def
R28143:28150 Imp <> ::x_';;'_x not
R28017:28020 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28088:28100 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28105:28122 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28135:28142 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28021:28023 Imp <> BEq constr
R28064:28068 Imp <> APlus constr
R28080:28083 Imp <> ANum constr
R28071:28074 Imp <> ANum constr
R28026:28031 Imp <> AMinus constr
R28042:28044 Imp <> AId constr
R28046:28046 Imp <> Y def
R28034:28036 Imp <> AId constr
R28038:28038 Imp <> X def
R28101:28104 Imp <> ::'SKIP' not
R28124:28128 Imp <> ::x_'::='_x not
R28123:28123 Imp <> Y def
R28129:28132 Imp <> ANum constr
R28284:28291 Imp <> ::x_';;'_x not
R28151:28154 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28224:28241 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28254:28271 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28276:28283 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28155:28157 Imp <> BLe constr
R28182:28187 Imp <> AMinus constr
R28199:28203 Imp <> APlus constr
R28215:28218 Imp <> ANum constr
R28206:28209 Imp <> ANum constr
R28190:28193 Imp <> ANum constr
R28160:28163 Imp <> ANum constr
R28243:28247 Imp <> ::x_'::='_x not
R28242:28242 Imp <> Y def
R28248:28251 Imp <> ANum constr
R28272:28275 Imp <> ::'SKIP' not
R28292:28297 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R28318:28328 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R28357:28365 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R28298:28300 Imp <> BEq constr
R28311:28314 Imp <> ANum constr
R28303:28305 Imp <> AId constr
R28307:28307 Imp <> Y def
R28330:28334 Imp <> ::x_'::='_x not
R28329:28329 Imp <> X def
R28335:28339 Imp <> APlus constr
R28350:28353 Imp <> ANum constr
R28342:28344 Imp <> AId constr
R28346:28346 Imp <> X def
R28419:28426 Imp <> ::x_';;'_x not
R28408:28412 Imp <> ::x_'::='_x not
R28407:28407 Imp <> X def
R28413:28416 Imp <> ANum constr
R28456:28463 Imp <> ::x_';;'_x not
R28428:28432 Imp <> ::x_'::='_x not
R28427:28427 Imp <> Y def
R28433:28438 Imp <> AMinus constr
R28449:28452 Imp <> ANum constr
R28441:28443 Imp <> AId constr
R28445:28445 Imp <> X def
R28562:28569 Imp <> ::x_';;'_x not
R28464:28467 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28505:28517 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28522:28540 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28553:28561 Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R28468:28470 Imp <> BEq constr
R28498:28501 Imp <> ANum constr
R28473:28478 Imp <> AMinus constr
R28489:28491 Imp <> AId constr
R28493:28493 Imp <> Y def
R28481:28483 Imp <> AId constr
R28485:28485 Imp <> X def
R28518:28521 Imp <> ::'SKIP' not
R28542:28546 Imp <> ::x_'::='_x not
R28541:28541 Imp <> Y def
R28547:28550 Imp <> ANum constr
R28582:28589 Imp <> ::x_';;'_x not
R28571:28575 Imp <> ::x_'::='_x not
R28570:28570 Imp <> Y def
R28576:28579 Imp <> ANum constr
R28590:28595 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R28616:28626 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R28655:28663 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R28596:28598 Imp <> BEq constr
R28609:28612 Imp <> ANum constr
R28601:28603 Imp <> AId constr
R28605:28605 Imp <> Y def
R28628:28632 Imp <> ::x_'::='_x not
R28627:28627 Imp <> X def
R28633:28637 Imp <> APlus constr
R28648:28651 Imp <> ANum constr
R28640:28642 Imp <> AId constr
R28644:28644 Imp <> X def
prf 28928:28952 <> fold_constants_aexp_sound
R28958:28969 Equiv <> atrans_sound def
R28971:28989 Equiv <> fold_constants_aexp def
R29008:29019 Equiv <> atrans_sound def
R29039:29044 Equiv <> aequiv def
R29453:29471 Equiv <> fold_constants_aexp def
R29497:29515 Equiv <> fold_constants_aexp def
R29453:29471 Equiv <> fold_constants_aexp def
R29497:29515 Equiv <> fold_constants_aexp def
R29497:29515 Equiv <> fold_constants_aexp def
R29497:29515 Equiv <> fold_constants_aexp def
R29497:29515 Equiv <> fold_constants_aexp def
R29497:29515 Equiv <> fold_constants_aexp def
R29453:29471 Equiv <> fold_constants_aexp def
R29497:29515 Equiv <> fold_constants_aexp def
R29497:29515 Equiv <> fold_constants_aexp def
R29497:29515 Equiv <> fold_constants_aexp def
R29497:29515 Equiv <> fold_constants_aexp def
R29497:29515 Equiv <> fold_constants_aexp def
R29453:29471 Equiv <> fold_constants_aexp def
R29497:29515 Equiv <> fold_constants_aexp def
R29497:29515 Equiv <> fold_constants_aexp def
R29497:29515 Equiv <> fold_constants_aexp def
R29497:29515 Equiv <> fold_constants_aexp def
R29497:29515 Equiv <> fold_constants_aexp def
prf 32459:32483 <> fold_constants_bexp_sound
R32488:32499 Equiv <> btrans_sound def
R32501:32519 Equiv <> fold_constants_bexp def
R32538:32549 Equiv <> btrans_sound def
R32569:32574 Equiv <> bequiv def
R33053:33071 Equiv <> fold_constants_aexp def
R33053:33071 Equiv <> fold_constants_aexp def
R33110:33128 Equiv <> fold_constants_aexp def
R33110:33128 Equiv <> fold_constants_aexp def
R33166:33170 Imp <> aeval def
R33185:33189 Imp <> aeval def
R33232:33256 Equiv <> fold_constants_aexp_sound thm
R33166:33170 Imp <> aeval def
R33185:33189 Imp <> aeval def
R33232:33256 Equiv <> fold_constants_aexp_sound thm
R33232:33256 Equiv <> fold_constants_aexp_sound thm
R33286:33290 Imp <> aeval def
R33305:33309 Imp <> aeval def
R33352:33376 Equiv <> fold_constants_aexp_sound thm
R33286:33290 Imp <> aeval def
R33305:33309 Imp <> aeval def
R33352:33376 Equiv <> fold_constants_aexp_sound thm
R33352:33376 Equiv <> fold_constants_aexp_sound thm
R33563:33569 Coq.Arith.EqNat <> beq_nat syndef
R33563:33569 Coq.Arith.EqNat <> beq_nat syndef
R33671:33689 Equiv <> fold_constants_bexp def
R33671:33689 Equiv <> fold_constants_bexp def
R33798:33816 Equiv <> fold_constants_bexp def
R33798:33816 Equiv <> fold_constants_bexp def
R33855:33873 Equiv <> fold_constants_bexp def
R33855:33873 Equiv <> fold_constants_bexp def
prf 34139:34162 <> fold_constants_com_sound
R34168:34179 Equiv <> ctrans_sound def
R34181:34198 Equiv <> fold_constants_com def
R34217:34228 Equiv <> ctrans_sound def
R34284:34294 Equiv <> refl_cequiv thm
R34284:34294 Equiv <> refl_cequiv thm
R34317:34331 Equiv <> CAss_congruence thm
R34317:34331 Equiv <> CAss_congruence thm
R34354:34378 Equiv <> fold_constants_aexp_sound thm
R34354:34378 Equiv <> fold_constants_aexp_sound thm
R34400:34414 Equiv <> CSeq_congruence prfax
R34400:34414 Equiv <> CSeq_congruence prfax
R34455:34460 Equiv <> bequiv def
R34465:34483 Equiv <> fold_constants_bexp def
R34455:34460 Equiv <> bequiv def
R34465:34483 Equiv <> fold_constants_bexp def
R34504:34528 Equiv <> fold_constants_bexp_sound prfax
R34504:34528 Equiv <> fold_constants_bexp_sound prfax
R34547:34565 Equiv <> fold_constants_bexp def
R34597:34610 Equiv <> CIf_congruence prfax
R34547:34565 Equiv <> fold_constants_bexp def
R34597:34610 Equiv <> CIf_congruence prfax
R34597:34610 Equiv <> CIf_congruence prfax
R34597:34610 Equiv <> CIf_congruence prfax
R34597:34610 Equiv <> CIf_congruence prfax
R34597:34610 Equiv <> CIf_congruence prfax
R34597:34610 Equiv <> CIf_congruence prfax
R34822:34833 Equiv <> trans_cequiv thm
R34822:34833 Equiv <> trans_cequiv thm
R34872:34879 Equiv <> IFB_true thm
R34872:34879 Equiv <> IFB_true thm
R34933:34944 Equiv <> trans_cequiv thm
R34933:34944 Equiv <> trans_cequiv thm
R34983:34991 Equiv <> IFB_false prfax
R34983:34991 Equiv <> IFB_false prfax
def 37494:37503 <> subst_aexp
R37510:37511 Maps <> id ind
R37519:37522 Imp <> aexp ind
R37530:37533 Imp <> aexp ind
R37538:37541 Imp <> aexp ind
R37554:37554 Equiv <> a var
R37565:37568 Imp <> ANum constr
R37587:37590 Imp <> ANum constr
R37598:37600 Imp <> AId constr
R37623:37628 Maps <> beq_id def
R37630:37630 Equiv <> i var
R37647:37649 Imp <> AId constr
R37640:37640 Equiv <> u var
R37658:37662 Imp <> APlus constr
R37680:37684 Imp <> APlus constr
R37707:37716 Equiv <> subst_aexp def
R37720:37720 Equiv <> u var
R37718:37718 Equiv <> i var
R37687:37696 Equiv <> subst_aexp def
R37700:37700 Equiv <> u var
R37698:37698 Equiv <> i var
R37730:37735 Imp <> AMinus constr
R37752:37757 Imp <> AMinus constr
R37780:37789 Equiv <> subst_aexp def
R37793:37793 Equiv <> u var
R37791:37791 Equiv <> i var
R37760:37769 Equiv <> subst_aexp def
R37773:37773 Equiv <> u var
R37771:37771 Equiv <> i var
R37803:37807 Imp <> AMult constr
R37825:37829 Imp <> AMult constr
R37852:37861 Equiv <> subst_aexp def
R37865:37865 Equiv <> u var
R37863:37863 Equiv <> i var
R37832:37841 Equiv <> subst_aexp def
R37845:37845 Equiv <> u var
R37843:37843 Equiv <> i var
def 37887:37899 <> subst_aexp_ex
R37982:37985 Coq.Init.Logic <> :type_scope:x_'='_x not
R38027:38027 Coq.Init.Logic <> :type_scope:x_'='_x not
R37905:37914 Equiv <> subst_aexp def
R37960:37964 Imp <> APlus constr
R37975:37977 Imp <> AId constr
R37979:37979 Imp <> X def
R37967:37969 Imp <> AId constr
R37971:37971 Imp <> Y def
R37919:37923 Imp <> APlus constr
R37936:37939 Imp <> ANum constr
R37926:37929 Imp <> ANum constr
R37916:37916 Imp <> X def
R37986:37990 Imp <> APlus constr
R38001:38005 Imp <> APlus constr
R38018:38021 Imp <> ANum constr
R38008:38011 Imp <> ANum constr
R37993:37995 Imp <> AId constr
R37997:37997 Imp <> Y def
def 38223:38242 <> subst_equiv_property
R38269:38274 Equiv <> cequiv def
R38319:38321 Imp <> ::x_';;'_x not
R38312:38316 Imp <> ::x_'::='_x not
R38310:38311 Equiv <> i1 var
R38317:38318 Equiv <> a1 var
R38324:38328 Imp <> ::x_'::='_x not
R38322:38323 Equiv <> i2 var
R38329:38338 Equiv <> subst_aexp def
R38346:38347 Equiv <> a2 var
R38343:38344 Equiv <> a1 var
R38340:38341 Equiv <> i1 var
R38286:38288 Imp <> ::x_';;'_x not
R38279:38283 Imp <> ::x_'::='_x not
R38277:38278 Equiv <> i1 var
R38284:38285 Equiv <> a1 var
R38291:38295 Imp <> ::x_'::='_x not
R38289:38290 Equiv <> i2 var
R38296:38297 Equiv <> a2 var
prf 39589:39601 <> subst_inequiv
R39607:39608 Coq.Init.Logic <> :type_scope:'~'_x not
R39609:39628 Equiv <> subst_equiv_property def
R39647:39666 Equiv <> subst_equiv_property def
R39877:39891 Imp <> ::x_';;'_x not
R39850:39854 Imp <> ::x_'::='_x not
R39849:39849 Imp <> X def
R39855:39859 Imp <> APlus constr
R39870:39873 Imp <> ANum constr
R39862:39864 Imp <> AId constr
R39866:39866 Imp <> X def
R39893:39897 Imp <> ::x_'::='_x not
R39892:39892 Imp <> Y def
R39898:39900 Imp <> AId constr
R39902:39902 Imp <> X def
R39877:39891 Imp <> ::x_';;'_x not
R39850:39854 Imp <> ::x_'::='_x not
R39849:39849 Imp <> X def
R39855:39859 Imp <> APlus constr
R39870:39873 Imp <> ANum constr
R39862:39864 Imp <> AId constr
R39866:39866 Imp <> X def
R39893:39897 Imp <> ::x_'::='_x not
R39892:39892 Imp <> Y def
R39898:39900 Imp <> AId constr
R39902:39902 Imp <> X def
R39958:39972 Imp <> ::x_';;'_x not
R39931:39935 Imp <> ::x_'::='_x not
R39930:39930 Imp <> X def
R39936:39940 Imp <> APlus constr
R39951:39954 Imp <> ANum constr
R39943:39945 Imp <> AId constr
R39947:39947 Imp <> X def
R39974:39978 Imp <> ::x_'::='_x not
R39973:39973 Imp <> Y def
R39979:39983 Imp <> APlus constr
R39994:39997 Imp <> ANum constr
R39986:39988 Imp <> AId constr
R39990:39990 Imp <> X def
R39958:39972 Imp <> ::x_';;'_x not
R39931:39935 Imp <> ::x_'::='_x not
R39930:39930 Imp <> X def
R39936:39940 Imp <> APlus constr
R39951:39954 Imp <> ANum constr
R39943:39945 Imp <> AId constr
R39947:39947 Imp <> X def
R39974:39978 Imp <> ::x_'::='_x not
R39973:39973 Imp <> Y def
R39979:39983 Imp <> APlus constr
R39994:39997 Imp <> ANum constr
R39986:39988 Imp <> AId constr
R39990:39990 Imp <> X def
R40026:40031 Equiv <> cequiv def
R40026:40031 Equiv <> cequiv def
R40248:40255 Maps <> t_update def
R40284:40284 Imp <> Y def
R40258:40265 Maps <> t_update def
R40279:40279 Imp <> X def
R40267:40277 Imp <> empty_state def
R40248:40255 Maps <> t_update def
R40284:40284 Imp <> Y def
R40258:40265 Maps <> t_update def
R40279:40279 Imp <> X def
R40267:40277 Imp <> empty_state def
R40309:40316 Maps <> t_update def
R40345:40345 Imp <> Y def
R40319:40326 Maps <> t_update def
R40340:40340 Imp <> X def
R40328:40338 Imp <> empty_state def
R40309:40316 Maps <> t_update def
R40345:40345 Imp <> Y def
R40319:40326 Maps <> t_update def
R40340:40340 Imp <> X def
R40328:40338 Imp <> empty_state def
R40374:40376 Imp <> ::x_'/'_x_'\\'_x not
R40388:40391 Imp <> ::x_'/'_x_'\\'_x not
R40377:40387 Imp <> empty_state def
R40414:40416 Imp <> ::x_'/'_x_'\\'_x not
R40428:40431 Imp <> ::x_'/'_x_'\\'_x not
R40417:40427 Imp <> empty_state def
R40485:40492 Maps <> t_update def
R40506:40506 Imp <> X def
R40494:40504 Imp <> empty_state def
R40465:40469 Imp <> E_Seq constr
R40526:40530 Imp <> E_Ass constr
R40374:40376 Imp <> ::x_'/'_x_'\\'_x not
R40388:40391 Imp <> ::x_'/'_x_'\\'_x not
R40377:40387 Imp <> empty_state def
R40414:40416 Imp <> ::x_'/'_x_'\\'_x not
R40428:40431 Imp <> ::x_'/'_x_'\\'_x not
R40417:40427 Imp <> empty_state def
R40414:40416 Imp <> ::x_'/'_x_'\\'_x not
R40428:40431 Imp <> ::x_'/'_x_'\\'_x not
R40417:40427 Imp <> empty_state def
R40485:40492 Maps <> t_update def
R40506:40506 Imp <> X def
R40494:40504 Imp <> empty_state def
R40465:40469 Imp <> E_Seq constr
R40526:40530 Imp <> E_Ass constr
R40526:40530 Imp <> E_Ass constr
R40485:40492 Maps <> t_update def
R40506:40506 Imp <> X def
R40494:40504 Imp <> empty_state def
R40465:40469 Imp <> E_Seq constr
R40526:40530 Imp <> E_Ass constr
R40526:40530 Imp <> E_Ass constr
R40485:40492 Maps <> t_update def
R40506:40506 Imp <> X def
R40494:40504 Imp <> empty_state def
R40465:40469 Imp <> E_Seq constr
R40526:40530 Imp <> E_Ass constr
R40526:40530 Imp <> E_Ass constr
R40485:40492 Maps <> t_update def
R40506:40506 Imp <> X def
R40494:40504 Imp <> empty_state def
R40465:40469 Imp <> E_Seq constr
R40685:40687 Coq.Init.Logic <> :type_scope:x_'='_x not
R40708:40726 Imp <> ceval_deterministic thm
R40731:40741 Imp <> empty_state def
R40685:40687 Coq.Init.Logic <> :type_scope:x_'='_x not
R40708:40726 Imp <> ceval_deterministic thm
R40731:40741 Imp <> empty_state def
R40783:40785 Coq.Init.Logic <> :type_scope:x_'='_x not
R40782:40782 Imp <> Y def
R40790:40790 Imp <> Y def
R40783:40785 Coq.Init.Logic <> :type_scope:x_'='_x not
R40782:40782 Imp <> Y def
R40790:40790 Imp <> Y def
ind 41198:41217 <> var_not_used_in_aexp
constr 41248:41253 <> VNUNum
constr 41302:41306 <> VNUId
constr 41364:41370 <> VNUPlus
constr 41504:41511 <> VNUMinus
constr 41646:41652 <> VNUMult
R41222:41223 Maps <> id ind
R41232:41235 Coq.Init.Logic <> :type_scope:x_'->'_x not
R41228:41231 Imp <> aexp ind
R41266:41285 Equiv <> var_not_used_in_aexp ind
R41290:41293 Imp <> ANum constr
R41295:41295 Equiv <> n var
R41325:41328 Coq.Init.Logic <> :type_scope:x_'->'_x not
R41329:41348 Equiv <> var_not_used_in_aexp ind
R41353:41355 Imp <> AId constr
R41357:41357 Equiv <> Y var
R41320:41323 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R41324:41324 Equiv <> Y var
R41418:41427 Coq.Init.Logic <> :type_scope:x_'->'_x not
R41453:41462 Coq.Init.Logic <> :type_scope:x_'->'_x not
R41463:41482 Equiv <> var_not_used_in_aexp ind
R41487:41491 Imp <> APlus constr
R41496:41497 Equiv <> a2 var
R41493:41494 Equiv <> a1 var
R41428:41447 Equiv <> var_not_used_in_aexp ind
R41451:41452 Equiv <> a2 var
R41393:41412 Equiv <> var_not_used_in_aexp ind
R41416:41417 Equiv <> a1 var
R41559:41568 Coq.Init.Logic <> :type_scope:x_'->'_x not
R41594:41603 Coq.Init.Logic <> :type_scope:x_'->'_x not
R41604:41623 Equiv <> var_not_used_in_aexp ind
R41628:41633 Imp <> AMinus constr
R41638:41639 Equiv <> a2 var
R41635:41636 Equiv <> a1 var
R41569:41588 Equiv <> var_not_used_in_aexp ind
R41592:41593 Equiv <> a2 var
R41534:41553 Equiv <> var_not_used_in_aexp ind
R41557:41558 Equiv <> a1 var
R41700:41709 Coq.Init.Logic <> :type_scope:x_'->'_x not
R41735:41744 Coq.Init.Logic <> :type_scope:x_'->'_x not
R41745:41764 Equiv <> var_not_used_in_aexp ind
R41769:41773 Imp <> AMult constr
R41778:41779 Equiv <> a2 var
R41775:41776 Equiv <> a1 var
R41710:41729 Equiv <> var_not_used_in_aexp ind
R41733:41734 Equiv <> a2 var
R41675:41694 Equiv <> var_not_used_in_aexp ind
R41698:41699 Equiv <> a1 var
prf 41790:41804 <> aeval_weakening
R41852:41857 Coq.Init.Logic <> :type_scope:x_'->'_x not
R41884:41886 Coq.Init.Logic <> :type_scope:x_'='_x not
R41858:41862 Imp <> aeval def
R41883:41883 Equiv <> a var
R41865:41872 Maps <> t_update def
R41879:41880 Equiv <> ni var
R41877:41877 Equiv <> i var
R41874:41875 Equiv <> st var
R41887:41891 Imp <> aeval def
R41896:41896 Equiv <> a var
R41893:41894 Equiv <> st var
R41828:41847 Equiv <> var_not_used_in_aexp ind
R41851:41851 Equiv <> a var
R41849:41849 Equiv <> i var
prf 42196:42211 <> inequiv_exercise
R42216:42217 Coq.Init.Logic <> :type_scope:'~'_x not
R42218:42223 Equiv <> cequiv def
R42251:42254 Imp <> ::'SKIP' not
R42226:42231 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R42237:42240 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R42245:42248 Imp <> ::'WHILE'_x_'DO'_x_'END' not
R42232:42236 Imp <> BTrue constr
R42241:42244 Imp <> ::'SKIP' not
mod 44362:44365 <> Himp
ind 44463:44465 Himp com
constr 44481:44485 Himp CSkip
constr 44497:44500 Himp CAss
constr 44526:44529 Himp CSeq
constr 44555:44557 Himp CIf
constr 44591:44596 Himp CWhile
constr 44623:44628 Himp CHavoc
R44489:44491 Equiv <> com ind
R44506:44509 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44514:44517 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44518:44520 Equiv <> com ind
R44510:44513 Imp <> aexp ind
R44504:44505 Maps <> id ind
R44536:44539 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44543:44546 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44547:44549 Equiv <> com ind
R44540:44542 Equiv <> com ind
R44533:44535 Equiv <> com ind
R44565:44568 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44572:44575 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44579:44582 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44583:44585 Equiv <> com ind
R44576:44578 Equiv <> com ind
R44569:44571 Equiv <> com ind
R44561:44564 Imp <> bexp ind
R44604:44607 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44611:44614 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44615:44617 Equiv <> com ind
R44608:44610 Equiv <> com ind
R44600:44603 Imp <> bexp ind
R44634:44637 Coq.Init.Logic <> :type_scope:x_'->'_x not
R44638:44640 Equiv <> com ind
R44632:44633 Maps <> id ind
R44698:44702 Equiv Himp CSkip constr
not 44684:44684 Himp ::'SKIP'
R44732:44735 Equiv Himp CAss constr
not 44714:44714 Himp ::x_'::='_x
R44783:44786 Equiv Himp CSeq constr
not 44766:44766 Himp ::x_';;'_x
R44871:44876 Equiv Himp CWhile constr
not 44840:44840 Himp ::'WHILE'_x_'DO'_x_'END'
R44970:44972 Equiv Himp CIf constr
not 44928:44928 Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI'
R45045:45050 Equiv Himp CHavoc constr
not 45029:45029 Himp ::'HAVOC'_x
ind 45479:45483 Himp ceval
constr 45524:45529 Himp E_Skip
constr 45572:45576 Himp E_Ass
constr 45702:45706 Himp E_Seq
constr 45838:45845 Himp E_IfTrue
constr 46002:46010 Himp E_IfFalse
constr 46168:46179 Himp E_WhileFalse
constr 46298:46308 Himp E_WhileTrue
R45490:45493 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45499:45502 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45508:45511 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45503:45507 Imp <> state def
R45494:45498 Imp <> state def
R45487:45489 Equiv Himp com ind
R46554:46558 Equiv <> ceval ind
R45545:45549 Imp <> state def
R45556:45558 Equiv Himp ::x_'/'_x_'\\'_x not
R45561:45564 Equiv Himp ::x_'/'_x_'\\'_x not
R45552:45555 Equiv Himp ::'SKIP' not
R45559:45560 Equiv <> st var
R45565:45566 Equiv <> st var
R45593:45597 Imp <> state def
R45606:45609 Imp <> aexp ind
R45617:45619 Coq.Init.Datatypes <> nat ind
R45627:45628 Maps <> id ind
R45653:45662 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45663:45663 Equiv Himp ::x_'/'_x_'\\'_x not
R45672:45675 Equiv Himp ::x_'/'_x_'\\'_x not
R45678:45681 Equiv Himp ::x_'/'_x_'\\'_x not
R45665:45669 Equiv Himp ::x_'::='_x not
R45664:45664 Equiv <> X var
R45670:45671 Equiv <> a1 var
R45676:45677 Equiv <> st var
R45682:45689 Maps <> t_update def
R45696:45696 Equiv <> n var
R45694:45694 Equiv <> X var
R45691:45692 Equiv <> st var
R45649:45651 Coq.Init.Logic <> :type_scope:x_'='_x not
R45638:45642 Imp <> aeval def
R45647:45648 Equiv <> a1 var
R45644:45645 Equiv <> st var
R45652:45652 Equiv <> n var
R45726:45728 Equiv Himp com ind
R45746:45750 Imp <> state def
R45774:45783 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45800:45809 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45810:45810 Equiv Himp ::x_'/'_x_'\\'_x not
R45819:45822 Equiv Himp ::x_'/'_x_'\\'_x not
R45825:45828 Equiv Himp ::x_'/'_x_'\\'_x not
R45813:45816 Equiv Himp ::x_';;'_x not
R45811:45812 Equiv <> c1 var
R45817:45818 Equiv <> c2 var
R45823:45824 Equiv <> st var
R45829:45832 Equiv <> st'' var
R45786:45788 Equiv Himp ::x_'/'_x_'\\'_x not
R45792:45795 Equiv Himp ::x_'/'_x_'\\'_x not
R45784:45785 Equiv <> c2 var
R45789:45791 Equiv <> st' var
R45796:45799 Equiv <> st'' var
R45762:45764 Equiv Himp ::x_'/'_x_'\\'_x not
R45767:45770 Equiv Himp ::x_'/'_x_'\\'_x not
R45760:45761 Equiv <> c1 var
R45765:45766 Equiv <> st var
R45771:45773 Equiv <> st' var
R45866:45870 Imp <> state def
R45879:45882 Imp <> bexp ind
R45894:45896 Equiv Himp com ind
R45924:45933 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45948:45957 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45958:45958 Equiv Himp ::x_'/'_x_'\\'_x not
R45984:45987 Equiv Himp ::x_'/'_x_'\\'_x not
R45990:45993 Equiv Himp ::x_'/'_x_'\\'_x not
R45959:45962 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45965:45970 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45973:45978 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45981:45983 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R45963:45964 Equiv <> b1 var
R45971:45972 Equiv <> c1 var
R45979:45980 Equiv <> c2 var
R45988:45989 Equiv <> st var
R45994:45996 Equiv <> st' var
R45936:45938 Equiv Himp ::x_'/'_x_'\\'_x not
R45941:45944 Equiv Himp ::x_'/'_x_'\\'_x not
R45934:45935 Equiv <> c1 var
R45939:45940 Equiv <> st var
R45945:45947 Equiv <> st' var
R45917:45919 Coq.Init.Logic <> :type_scope:x_'='_x not
R45906:45910 Imp <> beval def
R45915:45916 Equiv <> b1 var
R45912:45913 Equiv <> st var
R45920:45923 Coq.Init.Datatypes <> true constr
R46031:46035 Imp <> state def
R46044:46047 Imp <> bexp ind
R46059:46061 Equiv Himp com ind
R46090:46099 Coq.Init.Logic <> :type_scope:x_'->'_x not
R46114:46123 Coq.Init.Logic <> :type_scope:x_'->'_x not
R46124:46124 Equiv Himp ::x_'/'_x_'\\'_x not
R46150:46153 Equiv Himp ::x_'/'_x_'\\'_x not
R46156:46159 Equiv Himp ::x_'/'_x_'\\'_x not
R46125:46128 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R46131:46136 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R46139:46144 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R46147:46149 Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R46129:46130 Equiv <> b1 var
R46137:46138 Equiv <> c1 var
R46145:46146 Equiv <> c2 var
R46154:46155 Equiv <> st var
R46160:46162 Equiv <> st' var
R46102:46104 Equiv Himp ::x_'/'_x_'\\'_x not
R46107:46110 Equiv Himp ::x_'/'_x_'\\'_x not
R46100:46101 Equiv <> c2 var
R46105:46106 Equiv <> st var
R46111:46113 Equiv <> st' var
R46082:46084 Coq.Init.Logic <> :type_scope:x_'='_x not
R46071:46075 Imp <> beval def
R46080:46081 Equiv <> b1 var
R46077:46078 Equiv <> st var
R46085:46089 Coq.Init.Datatypes <> false constr
R46196:46199 Imp <> bexp ind
R46208:46212 Imp <> state def
R46221:46223 Equiv Himp com ind
R46252:46261 Coq.Init.Logic <> :type_scope:x_'->'_x not
R46262:46262 Equiv Himp ::x_'/'_x_'\\'_x not
R46281:46284 Equiv Himp ::x_'/'_x_'\\'_x not
R46287:46290 Equiv Himp ::x_'/'_x_'\\'_x not
R46263:46268 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R46271:46274 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R46277:46280 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R46269:46270 Equiv <> b1 var
R46275:46276 Equiv <> c1 var
R46285:46286 Equiv <> st var
R46291:46292 Equiv <> st var
R46244:46246 Coq.Init.Logic <> :type_scope:x_'='_x not
R46233:46237 Imp <> beval def
R46242:46243 Equiv <> b1 var
R46239:46240 Equiv <> st var
R46247:46251 Coq.Init.Datatypes <> false constr
R46334:46338 Imp <> state def
R46347:46350 Imp <> bexp ind
R46359:46361 Equiv Himp com ind
R46389:46398 Coq.Init.Logic <> :type_scope:x_'->'_x not
R46413:46422 Coq.Init.Logic <> :type_scope:x_'->'_x not
R46457:46466 Coq.Init.Logic <> :type_scope:x_'->'_x not
R46467:46467 Equiv Himp ::x_'/'_x_'\\'_x not
R46486:46489 Equiv Himp ::x_'/'_x_'\\'_x not
R46492:46495 Equiv Himp ::x_'/'_x_'\\'_x not
R46468:46473 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R46476:46479 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R46482:46485 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R46474:46475 Equiv <> b1 var
R46480:46481 Equiv <> c1 var
R46490:46491 Equiv <> st var
R46496:46499 Equiv <> st'' var
R46423:46423 Equiv Himp ::x_'/'_x_'\\'_x not
R46442:46445 Equiv Himp ::x_'/'_x_'\\'_x not
R46449:46452 Equiv Himp ::x_'/'_x_'\\'_x not
R46424:46429 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R46432:46435 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R46438:46441 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R46430:46431 Equiv <> b1 var
R46436:46437 Equiv <> c1 var
R46446:46448 Equiv <> st' var
R46453:46456 Equiv <> st'' var
R46401:46403 Equiv Himp ::x_'/'_x_'\\'_x not
R46406:46409 Equiv Himp ::x_'/'_x_'\\'_x not
R46399:46400 Equiv <> c1 var
R46404:46405 Equiv <> st var
R46410:46412 Equiv <> st' var
R46382:46384 Coq.Init.Logic <> :type_scope:x_'='_x not
R46371:46375 Imp <> beval def
R46380:46381 Equiv <> b1 var
R46377:46378 Equiv <> st var
R46385:46388 Coq.Init.Datatypes <> true constr
R46554:46558 Equiv Himp ceval ind
not 46529:46529 Himp ::x_'/'_x_'\\'_x
def 46673:46686 Himp havoc_example1
R46690:46690 Equiv Himp ::x_'/'_x_'\\'_x not
R46698:46701 Equiv Himp ::x_'/'_x_'\\'_x not
R46713:46716 Equiv Himp ::x_'/'_x_'\\'_x not
R46691:46696 Equiv Himp ::'HAVOC'_x not
R46697:46697 Imp <> X def
R46702:46712 Imp <> empty_state def
R46717:46724 Maps <> t_update def
R46738:46738 Imp <> X def
R46726:46736 Imp <> empty_state def
def 46788:46801 Himp havoc_example2
R46807:46807 Equiv Himp ::x_'/'_x_'\\'_x not
R46822:46825 Equiv Himp ::x_'/'_x_'\\'_x not
R46837:46840 Equiv Himp ::x_'/'_x_'\\'_x not
R46812:46814 Equiv Himp ::x_';;'_x not
R46808:46811 Equiv Himp ::'SKIP' not
R46815:46820 Equiv Himp ::'HAVOC'_x not
R46821:46821 Imp <> Z def
R46826:46836 Imp <> empty_state def
R46841:46848 Maps <> t_update def
R46862:46862 Imp <> Z def
R46850:46860 Imp <> empty_state def
def 47003:47008 Himp cequiv
R47019:47021 Equiv Himp com ind
R47050:47054 Imp <> state def
R47073:47077 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R47061:47063 Equiv Himp ::x_'/'_x_'\\'_x not
R47066:47069 Equiv Himp ::x_'/'_x_'\\'_x not
R47059:47060 Equiv <> c1 var
R47064:47065 Equiv <> st var
R47070:47072 Equiv <> st' var
R47080:47082 Equiv Himp ::x_'/'_x_'\\'_x not
R47085:47088 Equiv Himp ::x_'/'_x_'\\'_x not
R47078:47079 Equiv <> c2 var
R47083:47084 Equiv <> st var
R47089:47091 Equiv <> st' var
def 47308:47310 Himp pXY
R47324:47326 Equiv Himp ::x_';;'_x not
R47317:47322 Equiv Himp ::'HAVOC'_x not
R47323:47323 Imp <> X def
R47327:47332 Equiv Himp ::'HAVOC'_x not
R47333:47333 Imp <> Y def
def 47348:47350 Himp pYX
R47364:47366 Equiv Himp ::x_';;'_x not
R47357:47362 Equiv Himp ::'HAVOC'_x not
R47363:47363 Imp <> Y def
R47367:47372 Equiv Himp ::'HAVOC'_x not
R47373:47373 Imp <> X def
prf 47481:47494 Himp pXY_cequiv_pYX
R47514:47517 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R47500:47505 Equiv Himp cequiv def
R47511:47513 Equiv Himp pYX def
R47507:47509 Equiv Himp pXY def
R47518:47518 Coq.Init.Logic <> :type_scope:'~'_x not
R47519:47524 Equiv Himp cequiv def
R47530:47532 Equiv Himp pYX def
R47526:47528 Equiv Himp pXY def
def 47698:47703 Himp ptwice
R47717:47719 Equiv Himp ::x_';;'_x not
R47710:47715 Equiv Himp ::'HAVOC'_x not
R47716:47716 Imp <> X def
R47720:47725 Equiv Himp ::'HAVOC'_x not
R47726:47726 Imp <> Y def
def 47741:47745 Himp pcopy
R47759:47761 Equiv Himp ::x_';;'_x not
R47752:47757 Equiv Himp ::'HAVOC'_x not
R47758:47758 Imp <> X def
R47763:47767 Equiv Himp ::x_'::='_x not
R47762:47762 Imp <> Y def
R47768:47770 Imp <> AId constr
R47772:47772 Imp <> X def
prf 47943:47961 Himp ptwice_cequiv_pcopy
R47986:47989 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R47967:47972 Equiv Himp cequiv def
R47981:47985 Equiv Himp pcopy def
R47974:47979 Equiv Himp ptwice def
R47990:47990 Coq.Init.Logic <> :type_scope:'~'_x not
R47991:47996 Equiv Himp cequiv def
R48005:48009 Equiv Himp pcopy def
R47998:48003 Equiv Himp ptwice def
def 48712:48713 Himp p1
R48717:48719 Equiv Himp com ind
R48726:48732 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48760:48768 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48811:48816 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48733:48736 Imp <> BNot constr
R48739:48741 Imp <> BEq constr
R48752:48755 Imp <> ANum constr
R48744:48746 Imp <> AId constr
R48748:48748 Imp <> X def
R48776:48782 Equiv Himp ::x_';;'_x not
R48769:48774 Equiv Himp ::'HAVOC'_x not
R48775:48775 Imp <> Y def
R48784:48788 Equiv Himp ::x_'::='_x not
R48783:48783 Imp <> X def
R48789:48793 Imp <> APlus constr
R48804:48807 Imp <> ANum constr
R48796:48798 Imp <> AId constr
R48800:48800 Imp <> X def
def 48831:48832 Himp p2
R48836:48838 Equiv Himp com ind
R48845:48851 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48879:48887 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48892:48897 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R48852:48855 Imp <> BNot constr
R48858:48860 Imp <> BEq constr
R48871:48874 Imp <> ANum constr
R48863:48865 Imp <> AId constr
R48867:48867 Imp <> X def
R48888:48891 Equiv Himp ::'SKIP' not
prf 49159:49172 Himp p1_may_diverge
R49200:49205 Coq.Init.Logic <> :type_scope:x_'->'_x not
R49206:49207 Coq.Init.Logic <> :type_scope:'~'_x not
R49210:49212 Equiv Himp ::x_'/'_x_'\\'_x not
R49215:49218 Equiv Himp ::x_'/'_x_'\\'_x not
R49208:49209 Equiv Himp p1 def
R49213:49214 Equiv <> st var
R49219:49221 Equiv <> st' var
R49195:49198 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R49191:49192 Equiv <> st var
R49194:49194 Imp <> X def
prf 49267:49280 Himp p2_may_diverge
R49308:49313 Coq.Init.Logic <> :type_scope:x_'->'_x not
R49314:49315 Coq.Init.Logic <> :type_scope:'~'_x not
R49318:49320 Equiv Himp ::x_'/'_x_'\\'_x not
R49323:49326 Equiv Himp ::x_'/'_x_'\\'_x not
R49316:49317 Equiv Himp p2 def
R49321:49322 Equiv <> st var
R49327:49329 Equiv <> st' var
R49303:49306 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R49299:49300 Equiv <> st var
R49302:49302 Imp <> X def
prf 49528:49538 Himp p1_p2_equiv
R49542:49547 Equiv Himp cequiv def
R49552:49553 Equiv Himp p2 def
R49549:49550 Equiv Himp p1 def
def 49824:49825 Himp p3
R49829:49831 Equiv Himp com ind
R49850:49854 Equiv Himp ::x_';;'_x not
R49839:49843 Equiv Himp ::x_'::='_x not
R49838:49838 Imp <> Z def
R49844:49847 Imp <> ANum constr
R49855:49861 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49889:49897 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49919:49924 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R49862:49865 Imp <> BNot constr
R49868:49870 Imp <> BEq constr
R49881:49884 Imp <> ANum constr
R49873:49875 Imp <> AId constr
R49877:49877 Imp <> X def
R49905:49911 Equiv Himp ::x_';;'_x not
R49898:49903 Equiv Himp ::'HAVOC'_x not
R49904:49904 Imp <> X def
R49912:49917 Equiv Himp ::'HAVOC'_x not
R49918:49918 Imp <> Z def
def 49939:49940 Himp p4
R49944:49946 Equiv Himp com ind
R49967:49971 Equiv Himp ::x_';;'_x not
R49954:49959 Equiv Himp ::x_'::='_x not
R49966:49966 Equiv Himp ::x_'::='_x not
R49953:49953 Imp <> X def
R49960:49963 Imp <> ANum constr
R49973:49978 Equiv Himp ::x_'::='_x not
R49985:49985 Equiv Himp ::x_'::='_x not
R49972:49972 Imp <> Z def
R49979:49982 Imp <> ANum constr
prf 49998:50010 Himp p3_p4_inequiv
R50014:50015 Coq.Init.Logic <> :type_scope:'~'_x not
R50016:50021 Equiv Himp cequiv def
R50026:50027 Equiv Himp p4 def
R50023:50024 Equiv Himp p3 def
def 50635:50636 Himp p5
R50640:50642 Equiv Himp com ind
R50649:50655 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50683:50691 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50699:50704 Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50656:50659 Imp <> BNot constr
R50662:50664 Imp <> BEq constr
R50675:50678 Imp <> ANum constr
R50667:50669 Imp <> AId constr
R50671:50671 Imp <> X def
R50692:50697 Equiv Himp ::'HAVOC'_x not
R50698:50698 Imp <> X def
def 50719:50720 Himp p6
R50724:50726 Equiv Himp com ind
R50734:50738 Equiv Himp ::x_'::='_x not
R50733:50733 Imp <> X def
R50739:50742 Imp <> ANum constr
prf 50757:50767 Himp p5_p6_equiv
R50771:50776 Equiv Himp cequiv def
R50781:50782 Equiv Himp p6 def
R50778:50779 Equiv Himp p5 def
R50836:50839 Equiv Himp <> mod
prf 51539:51569 <> swap_noninterfering_assignments
R51602:51607 Coq.Init.Logic <> :type_scope:x_'->'_x not
R51634:51639 Coq.Init.Logic <> :type_scope:x_'->'_x not
R51666:51671 Coq.Init.Logic <> :type_scope:x_'->'_x not
R51672:51677 Equiv <> cequiv def
R51721:51723 Imp <> ::x_';;'_x not
R51714:51718 Imp <> ::x_'::='_x not
R51712:51713 Equiv <> l2 var
R51719:51720 Equiv <> a2 var
R51726:51730 Imp <> ::x_'::='_x not
R51724:51725 Equiv <> l1 var
R51731:51732 Equiv <> a1 var
R51693:51695 Imp <> ::x_';;'_x not
R51686:51690 Imp <> ::x_'::='_x not
R51684:51685 Equiv <> l1 var
R51691:51692 Equiv <> a1 var
R51698:51702 Imp <> ::x_'::='_x not
R51696:51697 Equiv <> l2 var
R51703:51704 Equiv <> a2 var
R51640:51659 Equiv <> var_not_used_in_aexp ind
R51664:51665 Equiv <> a1 var
R51661:51662 Equiv <> l2 var
R51608:51627 Equiv <> var_not_used_in_aexp ind
R51632:51633 Equiv <> a2 var
R51629:51630 Equiv <> l1 var
R51596:51599 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R51594:51595 Equiv <> l1 var
R51600:51601 Equiv <> l2 var
def 52220:52226 <> capprox
R52237:52239 Imp <> com ind
R52269:52273 Imp <> state def
R52293:52296 Coq.Init.Logic <> :type_scope:x_'->'_x not
R52299:52301 Imp <> ::x_'/'_x_'\\'_x not
R52304:52307 Imp <> ::x_'/'_x_'\\'_x not
R52297:52298 Equiv <> c2 var
R52302:52303 Equiv <> st var
R52308:52310 Equiv <> st' var
R52281:52283 Imp <> ::x_'/'_x_'\\'_x not
R52286:52289 Imp <> ::x_'/'_x_'\\'_x not
R52279:52280 Equiv <> c1 var
R52284:52285 Equiv <> st var
R52290:52292 Equiv <> st' var
def 52707:52708 <> c3
R52712:52714 Imp <> com ind
def 52792:52793 <> c4
R52797:52799 Imp <> com ind
prf 52875:52889 <> c3_c4_different
R52908:52911 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R52893:52894 Coq.Init.Logic <> :type_scope:'~'_x not
R52895:52901 Equiv <> capprox def
R52906:52907 Equiv <> c4 prfax
R52903:52904 Equiv <> c3 prfax
R52912:52913 Coq.Init.Logic <> :type_scope:'~'_x not
R52914:52920 Equiv <> capprox def
R52925:52926 Equiv <> c3 prfax
R52922:52923 Equiv <> c4 prfax
def 53046:53049 <> cmin
R53053:53055 Imp <> com ind
prf 53133:53144 <> cmin_minimal
R53158:53164 Equiv <> capprox def
R53171:53171 Equiv <> c var
R53166:53169 Equiv <> cmin prfax
def 53348:53352 <> zprop
R53359:53361 Imp <> com ind
prf 53447:53462 <> zprop_preserving
R53488:53491 Coq.Init.Logic <> :type_scope:x_'->'_x not
R53504:53507 Coq.Init.Logic <> :type_scope:x_'->'_x not
R53508:53512 Equiv <> zprop prfax
R53514:53515 Equiv <> c' var
R53492:53498 Equiv <> capprox def
R53502:53503 Equiv <> c' var
R53500:53500 Equiv <> c var
R53481:53485 Equiv <> zprop prfax
R53487:53487 Equiv <> c var
