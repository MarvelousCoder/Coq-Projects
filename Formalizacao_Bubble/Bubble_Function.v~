Require Import List.
Require Import Arith.
Require Import Sorted.
Require Import Recdef.

Function bubble (l : list nat) {measure length} : list nat :=
  match l with
  | nil => nil
  | n :: nil => n :: nil
  | n1 :: n2 :: l' => if leb n1 n2
                      then n1 :: (bubble (n2 :: l'))
                      else n2 :: (bubble (n1 :: l'))
  end.
Proof.
  auto. auto.
Defined.

Fixpoint bubbleSort (l : list nat) : list nat :=
  match l with
  | nil => nil
  | n :: l' => bubble (n :: (bubbleSort l'))
  end.

Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y nil) ..).

Eval compute in bubble (1 :: 2 :: 0 :: 3 :: 1 :: nil).
Eval compute in bubbleSort ([1;3;2;4]).
Eval compute in bubble ([1;3;2;4;0;1]).
Eval compute in bubbleSort ([1;3;2;4;0;1]).
Eval compute in bubbleSort (1 :: 2 :: 0 :: 3 :: 1 :: nil).
Eval compute in bubbleSort (1 :: 2 :: 10 :: 3 :: 6 :: nil).

Fixpoint num_oc (n : nat) (l:list nat) : nat :=
  match l with 
    | [] => 0
    | h :: tl =>
      match eq_nat_dec n h with
        | left _  => S (num_oc n tl)
        | right _ => num_oc n tl 
      end
  end.


Definition equiv l l' := forall n, num_oc n l = num_oc n l'.

Inductive ordenada : list nat -> Prop :=
  | nil_ord : ordenada nil
  | one_ord : forall n:nat, ordenada [n]
  | mult_ord : forall (x y : nat) (l : list nat), ordenada (y :: l) -> le x y -> ordenada (x :: (y :: l)).

Theorem ex_falso_quodlibet : forall (P:Prop),
  False -> P.
Proof.
  intros P contra.
  destruct contra.  
Qed.

Fact num_oc_fact: forall l n,
    num_oc n (n :: l) = S (num_oc n l).
Proof.
  induction l.
  - simpl.
    intros n.
    destruct (eq_nat_dec n n).
    + reflexivity.
    + unfold not in n0.
      apply ex_falso_quodlibet.
      apply n0; reflexivity.
  - simpl num_oc.
    intros n.
    destruct (eq_nat_dec n n).
    + reflexivity.
    + apply ex_falso_quodlibet.
      apply n0; reflexivity.
Qed.

Lemma num_oc_comm: forall n n1 n2 l,
    num_oc n2 (n :: n1 :: l) = num_oc n2 (n1 :: n :: l).
Proof.
  intros.
  generalize dependent n1; generalize dependent n.
  generalize dependent n2; induction l.
  - simpl.
    intros.
    destruct (eq_nat_dec n2 n).
    + destruct (Nat.eq_dec n2 n1).
      * reflexivity.
      * reflexivity.
    + reflexivity.
  -  intros.
     simpl.
     destruct (eq_nat_dec n2 n).
     + destruct (eq_nat_dec n2 n1).
       * destruct (eq_nat_dec n2 a).
         ** reflexivity.
         ** reflexivity.
       * reflexivity.
     + reflexivity.
Qed.          

Lemma num_oc_bubble: forall l n,
    num_oc n (bubble l) =  num_oc n l.
Proof.
  intros l.
  functional induction (bubble l).
  - reflexivity.
  - reflexivity.
  - intros n.
    destruct (eq_nat_dec n n1).
    + rewrite e.
      rewrite -> num_oc_fact.
      rewrite -> IHl0.
      rewrite <- num_oc_fact.
      reflexivity.
    + simpl.
      destruct (eq_nat_dec n n1).
      * contradiction.
      * destruct (Nat.eq_dec n n2).
        ** rewrite <- num_oc_fact.
           rewrite <- e in IHl0.
           rewrite <- IHl0.
           rewrite <- e.
           reflexivity.
        ** rewrite IHl0.
           simpl num_oc at 1.
           destruct (eq_nat_dec n n2).
           *** contradiction.
           *** reflexivity.
  - intros.
    remember (n1 :: l') as l eqn: H.
    destruct (eq_nat_dec n n2).
    + rewrite e.
      rewrite -> num_oc_fact.      
      rewrite -> IHl0.
      rewrite <- num_oc_fact.
      rewrite -> H.
      apply num_oc_comm.
    + simpl num_oc at 1.
      destruct (eq_nat_dec n n2).
      * contradiction.
      * rewrite IHl0.
        rewrite <- num_oc_comm.
        rewrite <- H.
        simpl num_oc at 2.
        destruct (eq_nat_dec n n2).
        ** contradiction.
        ** reflexivity.
Qed.
               
Lemma bubble_preserva_ordem : forall l, 
    ordenada l -> ordenada (bubble l).
Proof.
Admitted.

Lemma ordenada_sub: forall l n, ordenada (n :: l) -> ordenada l.
Proof.
  destruct l.
  - intros.
    apply nil_ord.
  - intros.
    inversion H.
    assumption.
Qed.

Lemma bubble_leq : forall a b l,
    a <= b -> bubble (a :: (b :: l)) = a :: (bubble (b :: l)).
Proof.
  intros a b l Hle.
  rewrite bubble_equation.
  apply leb_correct in Hle.
  rewrite Hle.
  reflexivity.
Qed.

Lemma bubble_leq_2: forall n2 a n1 l,
    n2 <= a /\ a <= n1 -> bubble (n2 :: a :: n1 :: l) = a :: bubble (n2 :: n1 :: l).
Proof.
Admitted.

Lemma le_gt: forall a b c,
    a <= b /\ b <= c -> a < c.
Proof.
Admitted.

Lemma bubble_ord: forall l b a,
    a <= b /\ ordenada (bubble(b :: l)) -> ordenada (bubble (a :: b :: l)).
Proof.
  (* Primeiro caminho: *)
  
  (* induction l. *)
  (* - intros a b. *)
  (*   intros H; destruct H. *)
  (*   rewrite bubble_equation. *)
  (*   apply leb_correct in H. *)
  (*   rewrite H. *)
  (*   constructor. *)
  (*   + constructor. *)
  (*   + apply leb_complete; assumption. *)
  (* - intros a0 b H; destruct H. *)
  (*   rewrite -> bubble_leq with (l := a :: l). *)
  (*   + rewrite bubble_equation in *. *)
  (*     Admitted. *)

  (* Segundo caminho: *)
  
  intros l b.
  functional induction (bubble (b :: l)).
  - intros.
    rewrite bubble_equation.
    constructor.
  - intros.
    rewrite bubble_equation.
    destruct (leb a n) eqn: Heq.
    + rewrite bubble_equation.
      constructor.
      * constructor.
      * apply leb_complete; assumption.
    + rewrite bubble_equation.
      constructor.
      * constructor.
      * apply Nat.leb_gt in Heq.
        apply Nat.lt_le_incl in Heq.
        assumption.
  - intros.
    rewrite bubble_equation.
    destruct (leb a n1) eqn: Heq.
    + destruct H.
      rewrite bubble_equation.
      rewrite e0.
      constructor.
      * assumption.
      * apply leb_complete; assumption.
    + destruct H.
      rewrite bubble_equation.
      destruct (leb a n2) eqn: Han2.
      * constructor.
        ** rewrite <- bubble_leq.
           *** apply IHl1.
               split.
               **** assumption.
               **** apply ordenada_sub in H0.
                    assumption.
           *** apply leb_complete; assumption.
        **  apply Nat.leb_gt in Heq.
            apply Nat.lt_le_incl in Heq.
            assumption.
      * constructor.
        ** apply ordenada_sub in H0.
           assert(H': a <= b /\ ordenada (bubble (n2 :: l'))).
           { split.
             - assumption.
             - assumption.
           }
           apply IHl1 in H'.
           rewrite bubble_equation in H'.
           rewrite Han2 in H'.
           assumption.
        ** apply leb_complete; assumption.
  - intros.
    destruct H.
    rewrite bubble_equation.
    destruct (leb a n1) eqn: Heq.
    + rewrite bubble_equation.
      rewrite e0.
      destruct (leb a n2) eqn: Han2.
      * constructor.
        ** assumption.
        ** apply leb_complete; assumption.
      * rewrite <- bubble_leq.
        ** rewrite <- bubble_leq_2.
           rewrite bubble_equation.
           apply Nat.leb_gt in Han2.
           apply Nat.lt_le_incl in Han2.
           apply leb_correct in Han2.
           rewrite Han2.
           rewrite bubble_equation.
           rewrite Heq.
           constructor.
           *** apply ordenada_sub in H0.
               assert(H': a <= b /\ ordenada (bubble (n1 :: l'))).
               { split.
                 - assumption.
                 - assumption.
               }
               apply IHl1 in H'.
               rewrite <- bubble_leq.
               **** assumption.
               **** apply leb_complete; assumption.
           *** apply leb_complete; assumption.
           *** split.
               **** apply Nat.leb_gt in Han2.
                    apply Nat.lt_le_incl in Han2.
                    assumption.
               **** apply leb_complete; assumption.
        **  apply Nat.leb_gt in e0.
            apply Nat.lt_le_incl in e0.
            assumption.
    + rewrite bubble_equation.
      assert (H': (a <=? n2) = false).
      { apply Nat.leb_gt.
        apply le_gt with (a := n2) (b := n1) (c := a).
        split.
        - apply Nat.leb_gt in e0.
          apply Nat.lt_le_incl in e0.
          assumption.
        - apply Nat.leb_gt in Heq.
          apply Nat.lt_le_incl in Heq.
          assumption.
      } 
      rewrite H'.
      rewrite <- bubble_leq.
      * rewrite <- bubble_leq_2 with (n2 := n2) (a := n1) (n1 := a).
        ** rewrite bubble_equation.
           apply Nat.leb_gt in e0.
           apply Nat.lt_le_incl in e0.
           apply leb_correct in e0.
           rewrite e0. 
           rewrite bubble_equation.
           apply Nat.leb_gt in Heq.
           apply Nat.lt_le_incl in Heq.
           apply leb_correct in Heq.
           rewrite Heq.
           constructor.
           *** rewrite <- bubble_leq.
               
  (* Terceiro Caminho:  *)
  
  (* induction l. *)
  (* - intros. *)
  (*   rewrite bubble_equation. *)
  (*   destruct H. *)
  (*   apply leb_correct in H. *)
  (*   rewrite H. *)
  (*   rewrite bubble_equation. *)
  (*   constructor. *)
  (*   + constructor. *)
  (*   + apply leb_complete. *)
  (*     assumption. *)
  (* - intros b. *)
  (*   functional induction (bubble (b :: a :: l)). *)
  (*   + intros. *)
  (*     rewrite bubble_equation; constructor. *)
  (*   + intros. *)
  (*     rewrite bubble_equation. *)
  (*     destruct (leb a0 n) eqn: Heq. *)
  (*     * rewrite bubble_equation. *)
  (*       constructor. *)
  (*       ** constructor. *)
  (*       ** apply leb_complete; assumption. *)
  (*     * rewrite bubble_equation. *)
  (*       constructor. *)
  (*       ** constructor. *)
  (*       ** apply Nat.leb_gt in Heq. *)
  (*          apply Nat.lt_le_incl in Heq. *)
  (*          assumption. *)
  (*   + intros. *)
  (*     rewrite bubble_equation. *)
  (*     destruct (leb a0 n1) eqn: Heq. *)
  (*     * destruct H. *)
  (*       rewrite bubble_equation. *)
  (*       rewrite e0. *)
  (*       constructor. *)
  (*       ** destruct H; assumption. *)
  (*       ** apply leb_complete; assumption. *)
  (*     * rewrite bubble_equation. *)
  (*       destruct (leb a0 n2) eqn: Heq2. *)
  (*       ** constructor. *)
  (*          *** destruct H. *)
  (*              apply ordenada_sub in H0. *)
  (*              assert (H': a0 <= b /\ ordenada(bubble (n2 :: l'))). *)
  (*              { split. *)
  (*                - assumption. *)
  (*                - assumption. *)
  (*              }  *)
  (*              apply IHl1 in H'. *)
  (*              rewrite -> bubble_leq in H'. *)
  (*              **** assumption. *)
  (*              **** apply leb_complete; assumption. *)
  (*          ***  apply Nat.leb_gt in Heq. *)
  (*               apply Nat.lt_le_incl in Heq. *)
  (*               assumption. *)
  (*       ** constructor. *)
  (*          *** destruct H. *)
  (*              apply ordenada_sub in H0. *)
  (*              assert (H': a0 <= b /\ ordenada(bubble (n2 :: l'))). *)
  (*              { split. *)
  (*                - assumption. *)
  (*                - assumption. *)
  (*              }  *)
  (*              apply IHl1 in H'. *)
  (*              rewrite bubble_equation in H'. *)
  (*              rewrite Heq2 in H'. *)
  (*              assumption. *)
  (*          *** apply leb_complete; assumption. *)
  (*   + intros. *)
  (*     rewrite bubble_equation. *)
  (*     destruct (leb a0 n1) eqn: Heq. *)
  (*     * rewrite bubble_equation. *)
  (*       rewrite e0. *)
  (*       destruct (leb a0 n2) eqn: Ha0n2. *)
  (*       ** constructor. *)
  (*          *** destruct H; assumption. *)
  (*          *** apply leb_complete; assumption. *)
  (*       ** rewrite <- bubble_leq. *)
  (*          destruct H. *)
           
  (*          rewrite bubble_equation. *)
  (*          apply Nat.leb_gt in e0. *)
  (*          apply Nat.lt_le_incl in e0. *)
  (*          apply leb_correct in e0. *)
  (*          rewrite e0. *)
           
  (*          rewrite <- bubble_leq. *)
Admitted.
  



Theorem correcao: forall l,  (equiv l (bubbleSort l)) /\ ordenada (bubbleSort l).
Proof.
  induction l.
  - simpl.
    split.
    + unfold equiv.
      reflexivity.
    + apply nil_ord.
  - split.
    + destruct IHl.
      unfold equiv in *.
      simpl bubbleSort.
      symmetry.
      rewrite -> num_oc_bubble.
      simpl num_oc.
      * destruct eq_nat_dec.
        ** rewrite -> H.
           reflexivity.
        ** symmetry.
           apply H.
    + destruct IHl as [Hequiv Hord].
      simpl bubbleSort in *.

      (* Primeiro caminho: *)
      functional induction (bubble (a :: bubbleSort l)).
      * constructor.
      * constructor.
      * rewrite <- bubble_leq.
        ** apply bubble_ord.
           split.
           *** apply leb_complete; assumption.
           *** assumption.
        ** apply leb_complete; assumption.
      * apply Nat.leb_gt in e0.
        apply Nat.lt_le_incl in e0.
        rewrite <- bubble_leq.
        ** apply bubble_ord.
           split.
           *** assumption.
           *** assumption.
        ** assumption.
      
      (* Segundo caminho: *)
      (* functional induction (bubble (a :: bubbleSort l)). *)
      (* * constructor. *)
      (* * constructor. *)
      (* * rewrite bubble_equation in *. *)
      (*   destruct l' eqn: eq. *)
      (*   ** constructor. *)
      (*      assumption. *)
      (*      apply leb_complete; assumption. *)
      (*   ** destruct (leb n2 n) eqn: Heq. *)
      (*      *** constructor. *)
      (*          **** assumption. *)
      (*          **** apply leb_complete; assumption. *)
      (*      *** constructor. *)
      (*          **** assumption. *)
      (*          **** *)

    
      (* Terceiro caminho: *)
      (* destruct (bubbleSort l) eqn: eq0. *)
      (* * apply one_ord. *)
      (* * destruct (leb a n) eqn: eq. *)
      (*   ** assert (H': ordenada (a :: n :: l0)). *)
      (*      { apply mult_ord. *)
      (*        - assumption. *)
      (*        - apply leb_complete. *)
      (*          assumption. *)
      (*      } *)
      (*      apply bubble_preserva_ordem. *)
      (*      assumption. *)
      (*   ** rewrite bubble_equation. *)
      (*      rewrite eq. *)
      (*      rewrite <- bubble_leq. *)
      (*      Focus 2. *)
      (*      *** apply Nat.leb_gt in eq. *)
      (*          apply Nat.lt_le_incl in eq. *)
      (*          assumption. *)
      (*      ***  *)  
Qed.
      
Theorem correcao_comp: forall (l:list nat), {l' | equiv l l' /\ ordenada l'}.
Proof.
  intro l.
  exists (bubbleSort l).
  apply correcao.
Qed.
  
Recursive Extraction correcao_comp.
Extraction "Bubble_Sort.ml" correcao_comp.
  
